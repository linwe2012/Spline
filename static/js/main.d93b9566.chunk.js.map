{"version":3,"sources":["utils.js","shino/a0.png","shino/a1.png","shino/a2.png","shino/a3.png","shino/b0.png","imageman.js","spline.js","render.js","personal_page.js","App.js","serviceWorker.js","index.js"],"names":["BeginingPrime","tau","p0","p1","p2","p0_prime","THREE","p1_prime","x","y","z","addVectors","clone","negate","multiplyScalar","Integration","mat","ua","ub","delta_x","elements","ax","ay","az","bx","by","bz","cx","cy","cz","A","B","C","D","E","nsplit","Math","floor","res","u","u2","u3","u4","sqrt","cnt","feed","console","log","tmp","Image","arr","w","h","scale","skew_k","skew_b","this","plane","map","image","img","loadTexture","transparent","needsUpdate","shplane","overdraw","ImageManger","frame","run_image","run_cnt","first_run","speed","current_pos","images","a0","a1","a2","a3","b0","target_image","name","url","scene","id","remove","vec","numInterp","curveTau","length","k","num","add","rotation","set","updateMatrix","span","rad","pos","zAix","sub","atan","setRotationFromAxisAngle","applyAxisAngle","normalize","position","Samplers","v","sin","PI","SplineLine","themeColor","need_update","spline","newCurve","timeGoes","animateTime","curveUpdateDone","newCurveTau","param","splineMatrial","color","linewidth","param_cache","param_is_displaying","paramDotsGroup","last_sample","last_sample_name","param_vectors","PurgeParam","last_spline","c","splineMat","material","splineGeo","vertices","geometry","param_need_update","theme","val","i","MapColorToDiscrete","lerp","inter","verticesNeedUpdate","a","gran","at","d","push","step","first","vstep","base","j","InsertOne","p3","p4","mat3","mat1","mat2","multiplyMatrices","transpose","ComputeTransformMatrix","Compute","applyMatrix4","comb","len","dots","pointOnPlane","Sample","splineArr","last_vertex","cur","KickUpdateCurve","sample","begin","last","all","sum","sa","prox","epsilon","abs","s0","ua2","ua3","children","sample_name","Paramterize","pointGeo","dotMaterial","dot","SplineGroup","canvas","camera","planeMesh","splines","mouse_down","positions","Float32Array","drawCount","dot_hovered","line","click_raycaster","hover_raycaster","spline_ctrl_needs_update","global_tau","global_gran","dotsGroup","show_param","param_sampler_fn","linear","param_sampler_name","bifrost_save","image_manager","addAttribute","onmousemove","e","MouseHoverOrDrag","onmousedown","onmouseup","UpdateSplineOnDotMoved","onclick","HandleClick","event","setPickPosition","pickPosition","HandleDrag","setFromCamera","intersectedObjects","intersectObjects","setHex","obj","object","dotOnPlane","GetMouseOnPlane","userData","attributes","array","point","intersectObject","Append","setDrawRange","Destroy","UpdateCurve","target","RunImage","newGran","DisplayNewCurve","newTau","bool","bifrost","TestValidSplines","s","curBifrost","last_last_spline","GetImages","b","SelectImg","undefined","ShowParam","HideParam","str","CanvasManager","clearPickPosition","clientWidth","clientHeight","appendChild","mouseout","rect","getBoundingClientRect","clientX","left","clientY","top","getCanvasRelativePosition","fn","Render","handle","el_id","renderer","antialias","powerPreference","document","getElementById","domElement","Aspect","setSize","setClearColor","setPixelRatio","window","devicePixelRatio","planegeo","render","requestAnimationFrame","HandleTau","n","HandleGran","HandleImg","run_img","HandleImgSpeed","img_speed","EnableBifrost","HandleCleanLines","Clear","ShowLinearSample","showParam","GetAllImgs","imgs","selectImg","SelectSampler","param_sampler","RunAll","props","colorGroup","elId","getImg","theimg","imgSpeed","enable_param","selectSampler","cleanup","oncleanupDone","React","Component","PersonalPage","href","className","src","alt","theTheme","createMuiTheme","palette","type","primary","main","blue","useStyles","makeStyles","root","flexGrow","paper","padding","spacing","marginTop","rawpaper","boxShadow","heading","fontSize","typography","pxToRem","flexBasis","flexShrink","button","margin","formControl","minWidth","littlePanel","width","height","detailPanel","flexDirection","Right","maxHeight","overflowY","PrettoSlider","withStyles","thumb","backgroundColor","border","marginLeft","active","valueLabel","track","borderRadius","rail","Slider","FixedMaxWidth","thediv","useRef","wrap","useEffect","current","style","ref","App","useState","setTau","setGran","setImg","setImgSpeed","disableRest","setDisableRest","setCleanup","setParam","imgArr","setImgArr","whichImg","setWhichImg","whichSampler","setWhichSampler","classes","ThemeProvider","CssBaseline","Grid","container","direction","item","xs","ExpansionPanel","ExpansionPanelSummary","expandIcon","Typography","ExpansionPanelDetails","textAlign","Link","Paper","onChangeCommitted","max","min","valueLabelDisplay","aria-label","defaultValue","disabled","FormControlLabel","control","Switch","checked","onChange","value","inputProps","label","FormControl","variant","InputLabel","htmlFor","Select","key","MenuItem","Object","keys","Fab","onClick","Boolean","location","hostname","match","ReactDOM","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d93b9566.chunk.js","sourcesContent":["import * as THREE from 'three'\nexport function MapColorToDiscrete(val /* [0, 1] */) { // -> [100, 200, ..., 900]\n    const k = [0,  0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1, 2]\n    const v = [50, 100, 200, 300, 400, 500, 600, 700, 800, 900, 900]\n    for(let i = 0; i < k.length; ++i) {\n        if(val < k[i+1]) {\n            return v[i]\n        }\n    }\n}\n\n// estimate curvature\nexport function BeginingPrime(tau, p0, p1, p2) {\n    let p0_prime = new THREE.Vector3();\n    let p1_prime = new THREE.Vector3();\n\n    p0_prime.x = tau * (2*p1.x-p2.x-p0.x)\n    p0_prime.y = tau * (2*p1.y-p2.y-p0.y)\n    p0_prime.z = 0 // tau * (2*p1.z-p2.z-p0.z)\n\n    p1_prime.addVectors(p0.clone().negate(), p2).multiplyScalar(tau)\n    return [p0_prime, p1_prime]\n}\n\n\nexport function Integration(mat, ua, ub, delta_x) {\n    let p1 = mat.elements\n    \n    //let ax = p1[0]\n    //let bx = p1[1]\n    //let cx = p1[2]\n    //let ay = p1[4]\n    //let by = p1[5]\n    //let cy = p1[6]\n    //let az = p1[8]\n    //let bz = p1[9]\n    //let cz = p1[10]\n\n    let ax = p1[0]\n    let ay = p1[1]\n    let az = p1[2]\n    let bx = p1[4]\n    let by = p1[5]\n    let bz = p1[6]\n    let cx = p1[8]\n    let cy = p1[9]\n    let cz = p1[10]\n\n    let A = 9*(ax*ax+ay*ay+az*az)\n    let B = 12*(ax*bx+ay*by+az*bz)\n    let C = 6*(ax*cx+ay*cy+az*cz)+4*(bx*bx+by*by+bz*bz)\n    let D = 4*(bx*cx+by*cy+bz*cz)\n    let E = cx*cx+cy*cy+cz*cz\n\n    let nsplit = Math.floor((ub-ua)/delta_x)\n    let res = 0\n    if(nsplit < 3) {\n        for(let u = ua; u <= ub; u += delta_x) {\n            let u2 = u*u\n            let u3 = u2*u\n            let u4 = u2*u2\n            \n            let tmp = Math.sqrt(A*u4+B*u3+C*u2+D*u+E)\n            res += tmp\n        }\n        return res * delta_x\n    }\n    let cnt = 0\n    \n    for(let u = ua; u <= ub; u += delta_x) {\n        let u2 = u*u\n        let u3 = u2*u\n        let u4 = u2*u2\n        let feed = A*u4+B*u3+C*u2+D*u+E\n        if(feed < 0) {\n            console.log('hi')\n        }\n        let tmp = Math.sqrt(feed)\n        //let tmp = A*u4+B*u3+C*u2+D*u+E\n        if(cnt === 0) {\n            res += tmp * delta_x\n        }\n        else if(cnt === nsplit) {\n            res += tmp * delta_x\n        }\n        else if(cnt % 2 === 1) {\n            res += 4 * tmp * delta_x\n        }\n        else {\n            res += 2 * tmp * delta_x\n        }\n        ++cnt\n    }\n    return res / 3\n}\n\n\nexport function ComputeTransformMatrix(p1, p2, p3, p4) {\n    let mat1 = new THREE.Matrix4()\n    mat1.set(\n        2, -2, 1, 1,\n        -3, 3, -2, -1,\n        0, 0, 1, 0,\n        1, 0, 0, 0\n    )\n    let mat2 = new THREE.Matrix4()\n    mat2.set(\n        p1.x, p1.y, p1.z, 0,\n        p2.x, p2.y, p2.z, 0,\n        p3.x, p3.y, p3.z, 0,\n        p4.x, p4.y, p4.z, 0,\n    )\n    let mat3 = new THREE.Matrix4()\n    mat3.multiplyMatrices(mat1, mat2)\n    mat3.transpose()\n    return mat3\n}","export default __webpack_public_path__ + \"static/media/a0.3ba5ce6b.png\";","export default __webpack_public_path__ + \"static/media/a1.961687c4.png\";","export default __webpack_public_path__ + \"static/media/a2.2eef8fe7.png\";","export default __webpack_public_path__ + \"static/media/a3.d97ae745.png\";","export default __webpack_public_path__ + \"static/media/b0.3ee84d8d.png\";","import * as THREE from 'three'\nimport a0 from './shino/a0.png'\nimport a1 from './shino/a1.png'\nimport a2 from './shino/a2.png'\nimport a3 from './shino/a3.png'\n\nimport b0 from './shino/b0.png'\n\nimport { BeginingPrime } from './utils'\n\nclass Image {\n\n    constructor(arr, w, h, scale, skew_k, skew_b) {\n        this.plane = arr.map((image)=>{\n            let img = new THREE.MeshBasicMaterial({ //CHANGED to MeshBasicMaterial\n                map:THREE.ImageUtils.loadTexture(image),\n                transparent: true,\n            });\n            img.map.needsUpdate = true; //ADDED\n            let shplane = new THREE.Mesh(new THREE.PlaneGeometry(w, h),img);\n            shplane.overdraw = true;\n            return shplane\n        })\n\n        this.scale = scale\n        this.skew_k = skew_k\n        this.skew_b = skew_b\n    }\n}\n\nexport class ImageManger {\n    frame = 0\n    run_image = false\n    run_cnt = 0\n    first_run = true\n    speed = 1.0\n    current_pos = 0\n\n    images = [\n        new Image([a0, a1, a2, a3], 0.75, 0.8, 0.30, 1.015, -0.06),\n        new Image([b0],             0.6,  1.0, 0.44, 1.015, 0.02),\n    ]\n    GetImages() {\n        return [\n            {name: '小新 & 美伢', url: a0},\n            {name: '小新', url: b0},\n        ]\n    }\n    \n    constructor() {\n        this.target_image = this.images[0]\n    }\n\n    SelectImg(scene, id) {\n        if(this.run_image && this.first_run === false) {\n            scene.remove(this.target_image.plane[this.frame]);\n        }\n        this.target_image = this.images[id]\n    }\n\n    RunImage(scene, vec, numInterp, curveTau) {\n        if(this.run_image === false || vec === null) {\n            if(this.first_run === false) {\n                scene.remove(this.target_image.plane[this.frame]);\n                this.first_run = true\n            }\n            return\n        }\n\n        if(vec.length <= 1) {\n            return\n        }\n\n        ++this.run_cnt\n        const k = -14.0/80\n        const b = 15-20*k\n        let num = Math.floor((numInterp*k+b) / this.speed)\n        if(num === 0) {\n            num = 1\n        }\n        if(this.run_cnt % num === 0) {\n            ++this.current_pos\n            this.run_cnt = 0\n            if(!this.first_run) {\n                scene.remove(this.target_image.plane[this.frame])\n            }\n            ++this.frame\n            this.frame = this.frame % this.target_image.plane.length\n            scene.add(this.target_image.plane[this.frame])\n        }\n        else {\n            return\n        }\n    \n        if(this.first_run === true) {\n            this.frame = 0\n            this.current_pos = 0\n            this.first_run = false\n        }\n        \n        const plane = this.target_image.plane[this.frame]\n        if(vec.length - 1 < this.current_pos) {\n            plane.rotation.set(0, 0, 0)\n            plane.updateMatrix();\n            this.current_pos = 0\n        }\n        \n        let current_pos = this.current_pos\n        let pos = vec[current_pos]\n        \n        const zAix = new THREE.Vector3(0,0,1)\n        let span;\n        if(this.current_pos === 0) {\n            span = BeginingPrime(curveTau, vec[0], vec[1], vec[2])[0]\n        }\n        else if(this.current_pos === vec.length-1) {\n            span = BeginingPrime(curveTau, vec[current_pos-2], vec[current_pos-1], vec[current_pos])[1].negate()\n        }\n        else {\n            span = vec[current_pos+1].clone().sub(vec[current_pos-1])\n        }\n        \n        let rad ;\n        if(span.x === 0) {\n            rad = 3.1415926 / 2\n            rad = span.y > 0? span.y : (-span.y)\n        }\n        else {\n           rad = Math.atan(span.y/span.x)\n        }\n        let scale = this.target_image.scale\n        let skew_k = this.target_image.skew_k\n        let skew_b = this.target_image.skew_b\n        this.target_image.plane[this.frame].setRotationFromAxisAngle(zAix, rad*skew_k-skew_b)\n        span.applyAxisAngle(zAix, 3.1415926/2).normalize().multiplyScalar(scale)\n        this.target_image.plane[this.frame].position.set(pos.x+span.x, pos.y+span.y, pos.z+span.z)\n    }\n\n}","import * as THREE from 'three'\n\nimport { MapColorToDiscrete, BeginingPrime, Integration, ComputeTransformMatrix } from './utils'\nimport { ImageManger } from './imageman'\n\n\n\nexport const Samplers = {\n    'linear': (v)=>v,\n    'ease in square': (v)=>v*v,\n    'ease in cubic': (v)=>v*v*v,\n    'ease in sine': (v)=> 1+Math.sin((v-1) * Math.PI / 2),\n    'ease out sine': (v)=> Math.sin(v * Math.PI / 2),\n    'ease in out sine': (v)=> (Math.sin((v-0.5)*Math.PI) + 1)/2\n}\n\nexport class SplineLine {\n    need_update = false\n    spline = null\n    newCurve = null\n    timeGoes = 0\n    animateTime = 20\n    curveUpdateDone = null // callback when update is done\n    themeColor = null\n    curveTau = 0.5\n    newCurveTau = 0.5\n    param = []\n    splineMatrial = new THREE.LineBasicMaterial( { color: 0xcccccc, linewidth: 2.2 } );\n    scene = null\n    param_cache = []\n    param_is_displaying = false\n    paramDotsGroup = new THREE.Group()\n\n    constructor(scene, themeColor) {\n        this.scene = scene\n        this.themeColor = themeColor\n    }\n\n    Destroy(){\n        if(this.spline !== null){\n            this.scene.remove(this.spline)\n            this.PurgeParam()\n        }\n    }\n\n    clone() {\n        let last_spline = this.spline\n        let c = new SplineLine(this.scene, this.themeColor)\n        let splineMat = new THREE.LineBasicMaterial( { color: last_spline.material.color.clone(), linewidth: 2.7 } );\n        let splineGeo = new THREE.Geometry();\n        splineGeo.vertices = last_spline.geometry.vertices.map(v => v.clone())\n        c.spline = new THREE.Line(splineGeo, splineMat)\n        c.curveTau = this.curveTau\n        c.param = this.param.map((v)=>v.clone())\n        c.curveUpdateDone = this.curveUpdateDone\n        return c\n    }\n\n    KickUpdateCurve() {\n        this.param_need_update = true\n        this.curveTau = this.newCurveTau\n        this.timeGoes = 0\n    }\n    \n    UpdateCurve() {\n        if(this.newCurve === null || this.spline === null) {\n            return\n        }\n\n        ++this.timeGoes;\n        \n        let theme = this.themeColor[MapColorToDiscrete(this.curveTau)]\n        if(this.timeGoes >= this.animateTime) {\n            this.spline.geometry.vertices = this.newCurve\n            this.newCurve = null\n            this.spline.material.color.set(theme)\n            if(this.curveUpdateDone !== null) {\n                this.curveUpdateDone()\n                this.param_need_update = true\n            }\n        }\n        else {\n            let scale = 1 / (this.animateTime - this.timeGoes)\n            this.spline.material.color.lerp(new THREE.Color(theme), scale)\n            \n            for(let i = 0; i < this.newCurve.length; ++i) {\n                let inter = this.newCurve[i].clone().sub( this.spline.geometry.vertices[i])\n                this.spline.geometry.vertices[i].add(inter.multiplyScalar(scale))\n            }\n        }\n        this.spline.geometry.verticesNeedUpdate = true\n    }\n\n\n    Sample(a, tau, gran) {\n        let res = []\n        this.param = []\n        this.newCurveTau = tau\n\n        function at(id) {\n            return a[id].position\n        }\n\n        if(a.length <= 1) {\n            for(let d of a) {\n                res.push(d.position)\n            }\n            this.newCurve = res\n            return this\n        }\n        else if(a.length === 2) {\n            let step = 1.0 / gran\n            res.push(at(0))\n            let first = at(0)\n            let vstep = at(1).clone().sub(first).multiplyScalar(step)\n            let base =  first.clone().add(vstep)\n            for(let j = 1; j < gran-1; ++j) {\n                res.push(base.add(vstep).clone())\n            }\n            res.push(at(1))\n            this.newCurve = res\n            return this\n        }\n\n        let InsertOne = (p1, p2, p3, p4) => {\n            let mat3 = ComputeTransformMatrix(p1, p2, p3, p4)\n            this.param.push(mat3)\n            return mat3\n        }\n\n        function Compute(u, mat) {\n            let u2 = u*u\n            let u3 =u2*u\n            let vec = new THREE.Vector4(u3, u2, u, 1)\n            vec.applyMatrix4(mat)\n            res.push(new THREE.Vector3(vec.x, vec.y, vec.z))\n        }\n\n        let comb = BeginingPrime(tau, at(0), at(1), at(2))\n        let step = 1.0 / gran\n        let u = step\n        res.push(at(0).clone())\n        let mat = InsertOne(at(0), at(1), comb[0], comb[1])\n        for(let j = 1; j < gran-1; ++j) {\n            Compute(u, mat)\n            u += step\n        }\n        \n        let len = a.length - 2\n        for(let i=1; i < len; ++i) {\n            u = step\n            res.push(at(i).clone())\n            let p1 = at(i)\n            let p2 = at(i+1)\n            let p3 = at(i-1).clone().negate().add(p2).multiplyScalar(tau)\n            let p4 = p1.clone().negate().add(at(i+2)).multiplyScalar(tau)\n            let mat = InsertOne(p1, p2, p3, p4)\n            for(let j = 1; j < gran-1; ++j) {\n                Compute(u, mat)\n                u += step\n            }\n        }\n\n        res.push(at(len).clone())\n        comb = BeginingPrime(tau, at(len-1), at(len), at(len+1))\n        u = step\n        comb[0].negate()\n        mat = InsertOne(at(len), at(len+1), comb[1], comb[0])\n        for(let j = 1; j < gran-1; ++j) {\n            Compute(u, mat)\n            u += step\n        }\n        res.push(at(len+1).clone())\n        this.newCurve = res\n        return this\n    }\n\n    Append(dots, numInterp, pointOnPlane) {\n        let scene = this.scene\n        let splineGeo = new THREE.Geometry();\n\n        this.Sample(dots, this.curveTau, numInterp);\n        let splineArr = this.newCurve\n\n        if(this.spline !== null) {\n            if(this.newCurve.length > numInterp) {\n                splineGeo.vertices = this.spline.geometry.vertices\n                let last_vertex = this.spline.geometry.vertices[this.spline.geometry.vertices.length - 1]\n                let step = pointOnPlane.clone().sub(last_vertex).multiplyScalar(1.0/numInterp)\n                let cur = last_vertex.clone().add(step)\n                for(let i = 1; i < numInterp; ++i) {\n                    splineGeo.vertices.push(cur.add(step).clone())\n                }\n                this.KickUpdateCurve()\n            }\n            else {\n                splineGeo.vertices = this.newCurve\n            }\n            scene.remove(this.spline)\n        }\n        else {\n            splineGeo.vertices = splineArr\n        }\n        \n        let spline = new THREE.Line( splineGeo, this.splineMatrial );\n        this.spline = spline\n        scene.add(spline)\n    }\n\n    DisplayNewCurve() {\n        let splineGeo = new THREE.Geometry();\n        splineGeo.vertices = this.newCurve\n        let spline = new THREE.Line( splineGeo, this.splineMatrial );\n        this.scene.remove(this.spline)\n        this.spline = spline\n        this.scene.add(spline)\n    }\n    \n    UpdateParam() {\n        if(this.param_is_displaying) {\n            // this.ShowParam(this.last_sample, )\n        }\n        \n    }\n\n    last_sample = null\n    Paramterize(sample, begin, last, gran) {\n        let param_cache = this.param_cache\n        this.last_sample = sample\n\n        if(this.spline === null || this.spline.geometry.vertices.length < gran) {\n            return\n        }\n    \n        let num = begin\n        let all = 0\n        while(num !== last-1) {\n            param_cache[num] = Integration(this.param[num], 0, 1, 0.01)\n            all += param_cache[num]\n            ++num\n        }\n        param_cache = param_cache.map((h)=>h/all) // normalize\n    \n        let sum = 0\n        let len = (last - begin - 1) * gran\n        let step = 1 / len\n        let cur = step\n        num = begin\n        let res = []\n        while(cur < 1) {\n            let sa = sample(cur)\n            while(sum < sa) {\n                sum += param_cache[num]\n                ++num\n            }\n            \n            let prox = sum - param_cache[num-1]\n            let epsilon = Math.abs(sa - prox)\n            let ua = 0\n            let ub = 1\n            while(epsilon > 0.001) {\n                let s0 = Integration(this.param[num-1], ua, (ua+ub)/2, 0.001) / all\n                if(s0 === 0) {\n                    break\n                }\n                if((prox + s0) > sa) {\n                    ub = (ua+ub)/2\n                }\n                else {\n                    prox += s0\n                    ua = (ua+ub)/2\n                }\n                epsilon = sa - prox\n            }\n    \n            let ua2 = ua * ua\n            let ua3 = ua * ua2\n            let vec = new THREE.Vector4(\n                ua3, ua2, ua, 1\n            )\n            vec.applyMatrix4(this.param[num-1])\n            res.push(new THREE.Vector3(vec.x, vec.y, vec.z))\n            cur += step\n        }\n        return res\n    }\n\n    last_sample_name = 'linear'\n    param_vectors = []\n    PurgeParam() {\n        this.paramDotsGroup.children = []\n        this.param_need_update = true\n        this.scene.remove(this.paramDotsGroup)\n    }\n\n\n    ShowParam(sample_name, begin, last, gran) {\n        if(last - begin < 2) {\n            return\n        }\n\n        // hot reload sampler function, bypass testing\n        if(sample_name !== this.last_sample_name) {\n            this.param_is_displaying = false\n            this.param_need_update = true\n        }\n\n        // already shown\n        if(this.param_is_displaying === true) {\n            return\n        }\n\n        // re-show param line when data hasn't been updated\n        if(this.param_need_update === false) {\n            this.scene.add(this.paramDotsGroup)\n            return\n        }\n\n        this.PurgeParam(); \n        this.param_is_displaying = true\n        this.scene.add(this.paramDotsGroup)\n\n        this.param_need_update = false\n\n        let arr = this.Paramterize(Samplers[sample_name], begin, last, gran)\n        this.param_vectors = arr\n        for(let i of arr) {\n            let pointGeo = new THREE.CircleGeometry( 0.04, 8 );\n            let dotMaterial = new THREE.MeshBasicMaterial( { color: 0xeeeeee } );\n            let dot = new THREE.Mesh( pointGeo, dotMaterial );\n\n            dot.position.set(i.x, i.y, i.z)\n            this.paramDotsGroup.add(dot)\n        }\n        \n    }\n\n    HideParam() {\n        \n        this.scene.remove(this.paramDotsGroup)\n        this.param_is_displaying = false\n    }\n}\n\n\n\nexport class SplineGroup {\n    splines = []\n    canvas = null\n    camera = null\n    planeMesh = null\n\n    mouse_down = false\n\n    geometry = new THREE.BufferGeometry();\n    material = new THREE.LineBasicMaterial( { color: 0xcccccc, linewidth: 2.7 } );\n    positions = new Float32Array( 100 * 3 );\n    drawCount = 0\n    dot_hovered = null\n    line = null\n    click_raycaster = new THREE.Raycaster();\n    hover_raycaster = new THREE.Raycaster();\n    mouse_down = false\n    camera = null\n    canvas = null\n    spline_ctrl_needs_update = false\n    global_tau = 0.5\n    global_gran = 20\n    dotsGroup = new THREE.Group()\n    scene\n    themeColor\n    show_param = false\n    param_sampler_fn = Samplers.linear\n    param_sampler_name = 'linear'\n\n    constructor(scene, canvas, camera, planeMesh, themeColor) {\n        this.scene = scene\n        this.canvas = canvas\n        this.camera = camera\n        this.planeMesh = planeMesh\n        this.themeColor = themeColor\n        this.geometry.addAttribute( 'position', new THREE.BufferAttribute( this.positions, 3 ) );\n        this.line = new THREE.Line( this.geometry,  this.material );\n        this.splines.push(new SplineLine(scene, themeColor))\n\n        scene.add(this.line)\n        scene.add(this.dotsGroup)\n        canvas.onmousemove = (e)=>{this.MouseHoverOrDrag(e)}\n        canvas.onmousedown = ()=> {this.mouse_down = true }\n        canvas.onmouseup = ()=>{this.mouse_down = false; this.UpdateSplineOnDotMoved(); }\n        canvas.onclick = (e)=>{this.HandleClick(e)}\n    }\n    \n    MouseHoverOrDrag(event) {\n        this.canvas.setPickPosition(event)\n        let pickPosition = this.canvas.pickPosition\n\n        if(this.dot_hovered && this.mouse_down) {\n            this.HandleDrag()\n            return\n        }\n    \n        this.hover_raycaster.setFromCamera(pickPosition, this.camera);\n        const intersectedObjects = this.hover_raycaster.intersectObjects(this.dotsGroup.children);\n        if(this.dot_hovered !== null) {\n            this.dot_hovered.material.color.setHex( 0xffffff );\n            this.dot_hovered = null\n        }\n        if (intersectedObjects.length) {\n            const obj = intersectedObjects[0].object\n            obj.material.color.setHex( 0xFFF176 );\n            this.dot_hovered = obj\n        }\n        \n    }\n\n    HandleDrag() {\n        let dotOnPlane = this.GetMouseOnPlane()\n        this.dot_hovered.position.set(dotOnPlane.x, dotOnPlane.y, dotOnPlane.z)\n        let id = this.dot_hovered.userData.id * 3\n        \n        let arr = this.line.geometry.attributes.position.array \n        arr[id]  = dotOnPlane.x\n        arr[id+1]= dotOnPlane.y\n        arr[id+2]= dotOnPlane.z\n        this.line.geometry.attributes.position.needsUpdate = true\n        this.spline_ctrl_needs_update = true\n    }\n\n    GetMouseOnPlane() {\n        let pickPosition = this.canvas.pickPosition\n        let click_raycaster = this.click_raycaster\n        let point = new THREE.Vector3(pickPosition.x, pickPosition.y, 5);\n        click_raycaster.setFromCamera(point, this.camera);\n        let hits = click_raycaster.intersectObject(this.planeMesh,true);\n        return hits[0].point;\n    }\n\n    UpdateSplineOnDotMoved() {\n        if(!this.spline_ctrl_needs_update) {\n            return\n        }\n        for(let spline of this.splines) {\n            spline.Sample(this.dotsGroup.children, this.global_tau, this.global_gran).KickUpdateCurve()\n        }\n        this.spline_ctrl_needs_update = false\n    }\n\n    HandleClick(event) {\n        if(this.dot_hovered !== null) {\n            return\n        }\n        \n        this.canvas.setPickPosition(event)\n        let pointOnPlane = this.GetMouseOnPlane()\n\n        let dotsGroup = this.dotsGroup\n        let pointGeo = new THREE.CircleGeometry( 0.06, 12 );\n        let dotMaterial = new THREE.MeshBasicMaterial( { color: 0xffffff } );\n        let dot = new THREE.Mesh( pointGeo, dotMaterial );\n        dot.position.set(pointOnPlane.x, pointOnPlane.y, pointOnPlane.z)\n        dot.userData = { id: dotsGroup.children.length }\n        dotsGroup.add( dot );\n        \n        for(let s of this.splines) {\n            s.Append(this.dotsGroup.children, this.global_gran, pointOnPlane)\n        }\n\n        let positions = this.line.geometry.attributes.position.array;\n        positions[3 * this.drawCount] = pointOnPlane.x\n        positions[3 * this.drawCount + 1] = pointOnPlane.y\n        positions[3 * this.drawCount + 2] = pointOnPlane.z\n        ++this.drawCount;\n        this.line.geometry.setDrawRange(0, this.drawCount)\n        this.line.geometry.attributes.position.needsUpdate = true\n        this.MouseHoverOrDrag(event)\n    }\n\n    set gran(newGran) {\n        if(this.global_gran === newGran) {\n            return\n        }\n    \n        this.global_gran = newGran\n        for(let s of this.splines) {\n            s.Sample(this.dotsGroup.children, this.global_tau, this.global_gran).DisplayNewCurve()\n        }\n    }\n\n    set tau(newTau) {\n        if(this.global_tau === newTau) {\n            return\n        }\n\n        this.global_tau = newTau\n        for(let s of this.splines) {\n            s.Sample(this.dotsGroup.children, this.global_tau, this.global_gran).KickUpdateCurve()\n        }\n    }\n\n    TestValidSplines() {\n        for(let s of this.splines) {\n            if(s.spline != null) {\n                return true\n            }\n        }\n        return false\n    }\n\n    bifrost_save = {\n        splines: null,\n        global_tau: 0.5\n    }\n\n    set bifrost(bool) {\n        let bifrost = this.bifrost_save.splines\n        let scene = this.scene\n        if((bifrost !== null) === bool || this.TestValidSplines() === false || this.dotsGroup.children.length <= 2) {\n            return\n        }\n    \n        if(bool === false) {\n            for(let i = 0; i < this.splines.length; ++i) {\n                this.scene.remove(this.splines[i].spline)\n            }\n            this.global_tau = this.bifrost_save.global_tau\n            this.splines = this.bifrost_save.splines\n            for(let s of this.splines) {\n                this.scene.add(s.spline)\n            }\n            this.bifrost_save.splines = null\n            return \n        }\n\n        this.bifrost_save.splines = this.splines\n        this.bifrost_save.global_tau = this.global_tau\n        let last_spline = this.splines[0]\n\n        for(let s of this.splines) {\n            scene.remove(s.spline)\n        }\n        this.splines = []\n\n        const k = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1]\n        \n        let curBifrost = 0\n        \n        last_spline.curveUpdateDone = () => {\n            if(curBifrost === k.length) {\n                last_spline.curveUpdateDone = null\n                return\n            }\n\n            let last_last_spline = last_spline\n            last_spline = last_spline.clone()\n            last_last_spline.curveUpdateDone = null\n\n            this.scene.add(last_spline.spline)\n            last_spline.Sample(this.dotsGroup.children, k[curBifrost], this.global_gran).KickUpdateCurve()\n            this.splines.push(last_spline)\n            ++curBifrost\n        }\n        last_spline.curveUpdateDone()\n    }\n\n    image_manager = new ImageManger()\n    set run_img(bool) {\n        this.image_manager.run_image = bool\n    }\n\n    set img_speed(val) {\n        this.image_manager.speed = val\n    }\n\n    get imgs() {\n        return this.image_manager.GetImages()\n    }\n\n    set selectImg(b){\n        this.image_manager.SelectImg(this.scene, b)\n    }\n\n    set showParam(b) {\n        if(this.show_param === b || b === undefined) {\n            return\n        }\n        \n        this.show_param = b\n        if(this.show_param === true) {\n            for(let s of this.splines) {\n                s.ShowParam(this.param_sampler_name, 0, this.dotsGroup.children.length, this.global_gran)\n            }\n        }\n        else {\n            for(let s of this.splines) {\n                s.HideParam()\n            }\n        }\n    }\n\n    set param_sampler(str) {\n        if(str) {\n            this.param_sampler_fn = Samplers[str]\n            this.param_sampler_name = str\n            if(this.show_param) {\n                for(let s of this.splines) {\n                    s.ShowParam(this.param_sampler_name, 0, this.dotsGroup.children.length, this.global_gran)\n                }\n            }\n            \n        }\n    }\n\n    Clear() {\n        this.image_manager.run_image = false\n        this.bifrost_save.splines = null\n        for(let s of this.splines) {\n            s.Destroy()\n        }\n        this.splines = [\n            new SplineLine(this.scene, this.themeColor)\n        ]\n        \n        let dotsGroup = this.dotsGroup\n        while(dotsGroup.children.length) {\n            dotsGroup.remove(dotsGroup.children[0])\n        }\n\n        \n        this.drawCount = 0\n        this.line.geometry.setDrawRange(0, this.drawCount)\n        this.line.geometry.attributes.position.needsUpdate = true\n    }\n\n    Render() {\n        for(let s of this.splines) {\n            s.UpdateCurve()\n        }\n        let target = null\n        if(this.splines.length && this.splines[0].spline){\n            if(this.show_param === false) {\n                target = this.splines[0].spline.geometry.vertices\n            }\n            else{\n                target = this.splines[0].param_vectors\n            }\n        }\n        \n        this.image_manager.RunImage(this.scene, target, this.global_gran, this.splines[0].curveTau)\n    }\n}\n\n\nexport class CanvasManager {\n    canvas = null\n    w = 0\n    h = 0\n    pickPosition = {\n        x: 0,\n        y: 0\n    }\n    frame = null\n\n    constructor(frame, canvas) {\n        this.clearPickPosition()\n        this.canvas = canvas\n        this.w = frame.clientWidth\n        this.h = frame.clientHeight\n        frame.appendChild(canvas)\n        frame.mouseout = ()=> this.clearPickPosition()\n        this.frame = frame\n    }\n    \n    set onmousemove(fn) {\n        this.frame.onmousemove = fn\n    }\n\n    set onmousedown(fn) {\n        this.frame.onmousedown = fn\n    }\n\n    set onmouseup(fn) {\n        this.frame.onmouseup = fn\n    }\n\n    set onclick(fn) {\n        this.frame.onclick = fn\n    }\n\n    Aspect() {\n        return this.w / this.h\n    }\n\n    getCanvasRelativePosition(event) {\n        const rect = this.canvas.getBoundingClientRect();\n        return {\n          x: event.clientX - rect.left,\n          y: event.clientY - rect.top,\n        };\n    }\n\n    setPickPosition(event) {\n        let pickPosition = this.pickPosition\n        const pos = this.getCanvasRelativePosition(event);\n        pickPosition.x = (pos.x / this.w) *  2 - 1;\n        pickPosition.y = (pos.y / this.h) * -2 + 1;  // note we flip Y\n    }\n\n    clearPickPosition() {\n        let pickPosition = this.pickPosition\n        pickPosition.x = -100000;\n        pickPosition.y = -100000;\n    }\n}","import React from 'react';\nimport * as THREE from 'three'\nimport { CanvasManager, SplineGroup } from './spline'\n\nexport default class Render extends React.Component {\n    componentDidMount() {\n        this.handle = RunAll(this.props.colorGroup, this.props.elId)\n        if(this.props.getImg !== undefined){\n            this.props.getImg(this.handle.GetAllImgs())\n        }\n        \n    }\n    render() {\n        if(this.handle !== undefined) {\n            this.handle.HandleTau(this.props.tau)\n            this.handle.HandleGran(this.props.gran)\n            this.handle.HandleImg(this.props.theimg)\n            this.handle.HandleImgSpeed(this.props.imgSpeed)\n            this.handle.EnableBifrost(this.props.bifrost)\n            this.handle.ShowLinearSample(this.props.enable_param)\n            this.handle.SelectImg(this.props.selectImg)\n            this.handle.SelectSampler(this.props.selectSampler)\n            if(this.props.cleanup === true) {\n                this.handle.HandleCleanLines()\n                this.props.oncleanupDone()\n            }\n        }\n        return (\n            <div>\n            </div>\n        );\n    }\n}\n\n\nfunction RunAll(themeColor, el_id){\nconst scene = new THREE.Scene();\nconst renderer = new THREE.WebGLRenderer({antialias : true, powerPreference:'high-performance'});\nconst canvas = new CanvasManager(document.getElementById(el_id), renderer.domElement);\nconst camera = new THREE.PerspectiveCamera(75, canvas.Aspect(), 0.1, 1000);\n\nrenderer.setSize(canvas.w, canvas.h);\nrenderer.setClearColor(0x000000, 1.0);\nrenderer.setPixelRatio(window.devicePixelRatio);\n\ncamera.position.z = 5;\n\nconst planegeo = new THREE.PlaneGeometry( 1000, 1000, 10, 10 );\nconst planeMesh = new THREE.Mesh(planegeo, new THREE.MeshBasicMaterial());\nconst spline = new SplineGroup(scene, canvas, camera, planeMesh, themeColor)\n\nfunction render() {\n    requestAnimationFrame(render);\n    spline.Render()\n    renderer.render(scene, camera);\n}\nrender();\n\nreturn {\n    HandleTau: (n)=>{spline.tau = n},\n    HandleGran: (n)=>{spline.gran = n },\n    HandleImg: (b)=>{spline.run_img = b},\n    HandleImgSpeed: (n)=>{spline.img_speed = n},\n    EnableBifrost: (b)=>{spline.bifrost = b},\n    HandleCleanLines: ()=>{ spline.Clear() },\n    ShowLinearSample: (b)=>{ spline.showParam = b},\n    GetAllImgs: ()=>{return spline.imgs},\n    SelectImg: (i)=>{spline.selectImg=i},\n    SelectSampler:(i)=>{spline.param_sampler=i}\n}\n\n}\n","import React from 'react'\nimport './personal_page.css'\n\n\nconst PersonalPage = (props) =>{\n\n    return (\n        <a href='https://linwe2012.github.io/personal-page'>\n        <div className='personal-page-wrap-white personal-page-wrap-dark'>\n            <img className='personal-page-avatar-white' src='https://linwe2012.github.io/personal-page/static/img/me-removebg-preview-sqr.svg' alt=''></img>\n            <div className='personal-page-text-white'>Lin's Personal Page</div>\n        </div>\n        </a>\n    )\n}\n\nexport default PersonalPage;","import React, {useEffect, useState, useRef} from 'react';\nimport './App.css';\nimport Render from './render'\nimport { createMuiTheme } from '@material-ui/core/styles';\nimport { ThemeProvider } from '@material-ui/styles';\nimport { green, orange, blue } from '@material-ui/core/colors';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport Slider from '@material-ui/core/Slider';\nimport Typography from '@material-ui/core/Typography';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Switch from '@material-ui/core/Switch';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport Link from '@material-ui/core/Link'\n\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Fab from '@material-ui/core/Fab';\nimport DeleteIcon from '@material-ui/icons/Delete';\n\nimport {Samplers} from './spline'\nimport PersonalPage from './personal_page'\n\nconst theTheme = createMuiTheme({\n  palette: {\n    type: 'dark',\n    primary:{\n      main: blue[500]\n    }\n  },\n});\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n  },\n  paper: {\n    padding: theme.spacing(3),\n    // textAlign: 'center',\n    marginTop: theme.spacing(1)\n  },\n  rawpaper: {\n    padding: theme.spacing(3),\n    // textAlign: 'center',\n    marginTop: theme.spacing(1),\n    boxShadow: 'none'\n  },\n  heading: {\n    fontSize: theme.typography.pxToRem(15),\n    flexBasis: '33.33%',\n    flexShrink: 0,\n  },\n  button: {\n    margin: theme.spacing(1),\n  },\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 160,\n  },\n  littlePanel: {\n    width: 200,\n    height: 200\n  },\n  detailPanel: {\n    flexDirection: 'column'\n  },\n  Right:{\n    maxHeight: '100vh',\n    overflowY: 'scroll'\n  },\n}));\n\nconst PrettoSlider = withStyles(theme => ({\n  root: {\n    color: theme.primary,\n    height: 8,\n  },\n  thumb: {\n    height: 24,\n    width: 24,\n    backgroundColor: '#fff',\n    border: '2px solid currentColor',\n    marginTop: -8,\n    marginLeft: -12,\n    '&:focus,&:hover,&$active': {\n      boxShadow: 'inherit',\n    },\n  },\n  active: {},\n  valueLabel: {\n    left: 'calc(-50% + 4px)',\n  },\n  track: {\n    height: 8,\n    borderRadius: 4,\n  },\n  rail: {\n    height: 8,\n    borderRadius: 4,\n  },\n}))(Slider);\n\nfunction FixedMaxWidth (props){\n  const thediv = useRef(null)\n  const wrap = useRef(null)\n  useEffect(()=>{\n    console.log('set',wrap.current.style.width )\n    thediv.current.style.width = wrap.current.style.width\n  })\n  return(\n    <div ref={wrap} className='canvas-frame-wrapper'>\n      <div ref={thediv} id=\"canvas-frame\" className=\"canvas-frame\"></div>\n      {props.children}\n    </div>\n  )\n}\n\n\nfunction App() {\n  const [spacing, setSpacing] = React.useState(2);\n  const [tau, setTau] = React.useState(0.5)\n  const [gran, setGran] = React.useState(20)\n  const [img, setImg] = React.useState(false)\n  const [imgSpeed, setImgSpeed] = React.useState(1.0)\n  const [disableRest, setDisableRest] = React.useState(false)\n  const [cleanup, setCleanup] = React.useState(false)\n  const [param, setParam] = React.useState(false)\n  const [imgArr, setImgArr] = React.useState([])\n  const [whichImg, setWhichImg] = React.useState(0)\n  const [whichSampler, setWhichSampler] = React.useState('linear')\n\n  const classes = useStyles();\n\n  function onChangeTau(e, val) {\n      setTau(val)\n  }\n  function onChangeGran(e, val) {\n      setGran(val)\n  }\n  function onChangeImg() {\n    setImg(!img)\n  }\n\n  function onChangeImgSpeed(e, val) {\n    setImgSpeed(val)\n  }\n\n  function onDisableAll() {\n    setDisableRest(!disableRest)\n  }\n\n  function resetScene() {\n    setImg(false)\n    setDisableRest(false)\n    setCleanup(true)\n  }\n  function resetDone() {\n    setCleanup(false)\n  }\n  function handleSelectImg(event) {\n    setWhichImg(event.target.value)\n  }\n  function handleSelectSampler(event) {\n    setWhichSampler(event.target.value)\n  }\n  function setImgsArr(i) {\n    setImgArr(i)\n  }\n\n  return (\n    <ThemeProvider theme={theTheme}>\n      <CssBaseline>\n        <div className=\"App\">\n          <Grid container direction=\"row\" className={classes.root} spacing={0}>\n            <Grid item xs={8}>\n              <FixedMaxWidth>\n                <Render \n                  tau={tau} gran={gran} \n                  theimg={img} imgSpeed={imgSpeed} \n                  colorGroup={blue} bifrost={disableRest} \n                  cleanup={cleanup} oncleanupDone={resetDone} \n                  elId={\"canvas-frame\"}\n                  enable_param={param}\n                  getImg={setImgsArr}\n                  selectImg={whichImg}\n                  selectSampler={whichSampler}\n                  ></Render>\n              </FixedMaxWidth>\n            </Grid>\n            <Grid item xs={4} className={classes.Right}>\n              <div className='ctrl'>\n              \n              <ExpansionPanel>\n                <ExpansionPanelSummary\n                  expandIcon={<ExpandMoreIcon />}\n                >\n                  <Typography className={classes.heading}>Manual</Typography>\n                </ExpansionPanelSummary>\n                <ExpansionPanelDetails style={{flexDirection:'column', textAlign:'left'}}>\n                  <Link href='https://en.wikipedia.org/wiki/Cubic_Hermite_spline'>\n                  Hermite Curve Interpolation\n                  </Link>\n                  <Link href='https://github.com/linwe2012/Spline'>\n                  Source code on Github\n                  </Link>\n                  <p></p>\n                  <Typography>\n                    Click on the left to create a vertex, a line is automatically made when there are more than 2 vertices.\n                    </Typography>\n                    <p></p>\n                    <Typography>\n                    Click on white dots, hold and drag.\n                    </Typography>\n                  \n                </ExpansionPanelDetails>\n                <ExpansionPanelDetails>\n                  <div id=\"control-canvase\"></div>\n                </ExpansionPanelDetails>\n              </ExpansionPanel>\n\n              <ExpansionPanel>\n                <ExpansionPanelSummary\n                  expandIcon={<ExpandMoreIcon />}\n                >\n                  <Typography >Spline Basic Control</Typography>\n                </ExpansionPanelSummary>\n                <ExpansionPanelDetails className={classes.detailPanel}>\n                  <Paper className={classes.paper}>\n                    <Typography id=\"tau\">\n                      Choose Tau Value\n                    </Typography>\n                    <div className='slide'>\n                      <PrettoSlider  onChangeCommitted={onChangeTau} max={1} min={0} step={0.01} valueLabelDisplay=\"auto\" aria-label=\"tau\" defaultValue={0.5} />\n                    </div>\n                  </Paper> \n                  <Paper className={classes.paper}>\n                    <Typography id=\"gran\">\n                    Granularity\n                    </Typography>\n                    <div className='slide'>\n                      <PrettoSlider disabled={disableRest} onChangeCommitted={onChangeGran} max={50} min={2} step={1} valueLabelDisplay=\"auto\" aria-label=\"gran\" defaultValue={20} />\n                    </div>\n                  </Paper>\n                </ExpansionPanelDetails>\n                </ExpansionPanel>\n\n                <ExpansionPanel>\n                <ExpansionPanelSummary\n                  expandIcon={<ExpandMoreIcon />}\n                >\n                  <Typography >Image Player</Typography>\n                </ExpansionPanelSummary>\n                <ExpansionPanelDetails className={classes.detailPanel}>\n                <Paper className={classes.rawpaper}>\n                  \n                  <FormControlLabel\n                    control={\n                      <Switch\n                        checked={img}\n                        onChange={onChangeImg}\n                        value=\"checkedA\"\n                        color=\"primary\"\n                        inputProps={{ 'aria-label': 'secondary checkbox' }}\n                        disabled={disableRest}\n                      />\n                    }\n                    label=\"Run Shinnosuke\"\n                  />\n                  <Paper className={classes.rawpaper}>\n                  <FormControl variant=\"filled\" className={classes.formControl}>\n                    <InputLabel htmlFor=\"select-img\">Select Image</InputLabel>\n                    <Select\n                      value={whichImg}\n                      onChange={handleSelectImg}\n                      inputProps={{\n                        name: 'img',\n                        id: 'select-img',\n                      }}\n                    >\n                      {\n                        \n                        imgArr.map((val, key)=> <MenuItem key={key} value={key}>{val.name}</MenuItem>)\n                      }\n                    </Select>\n                  </FormControl>\n                  </Paper>\n                  <Paper className={classes.rawpaper}>\n                  <Typography id=\"gran\">\n                    Animation Speed \n                  </Typography>\n                  <div className='slide'>\n                    <PrettoSlider disabled={disableRest} onChangeCommitted={onChangeImgSpeed} max={2.1} min={0.1} step={0.1} valueLabelDisplay=\"auto\" aria-label=\"speed\" defaultValue={1} />\n                  </div>\n                  </Paper>\n                </Paper>\n                </ExpansionPanelDetails>\n                </ExpansionPanel>\n                <Paper className={classes.paper}>\n                  <FormControlLabel\n                    control={\n                      <Switch\n                        checked={disableRest}\n                        onChange={onDisableAll}\n                        value=\"checkedA\"\n                        color=\"primary\"\n                        inputProps={{ 'aria-label': 'secondary checkbox' }}\n                      />\n                    }\n                    label=\"Bifrost\"\n                  />\n                  <FormControlLabel\n                    control={\n                      <Switch\n                        checked={param}\n                        onChange={()=> setParam(!param)}\n                        value=\"checkedA\"\n                        color=\"primary\"\n                        inputProps={{ 'aria-label': 'secondary checkbox' }}\n                        disabled={disableRest}\n                      />\n                    }\n                    label=\"Parametize\"\n                  />\n                  <Paper className={classes.rawpaper}>\n                  <FormControl variant=\"filled\" className={classes.formControl}>\n                    <InputLabel htmlFor=\"select-ease\">Ease Function</InputLabel>\n                    <Select\n                      value={whichSampler}\n                      onChange={handleSelectSampler}\n                      inputProps={{\n                        name: 'ease',\n                        id: 'select-ease',\n                      }}\n                    >\n                      {\n                        Object.keys(Samplers).map((val, key)=> <MenuItem key={key} value={val}>{val}</MenuItem>)\n                      }\n                    </Select>\n                  </FormControl>\n                  </Paper>\n                </Paper>\n                <Fab  aria-label=\"delete\" color=\"secondary\" className={classes.button} onClick={resetScene}>\n                  <DeleteIcon />\n                </Fab >\n                <PersonalPage />\n              </div>\n              \n            </Grid>\n\n          </Grid>\n        </div>\n    </CssBaseline >\n    </ThemeProvider>\n  );\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}