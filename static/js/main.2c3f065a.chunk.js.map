{"version":3,"sources":["shino/a0.png","shino/b0.png","shino/a1.png","shino/a2.png","shino/a3.png","utils.js","imageman.js","spline.js","render.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","BeginingPrime","tau","p0","p1","p2","p0_prime","THREE","p1_prime","x","y","z","addVectors","clone","negate","multiplyScalar","Integration","mat","ua","ub","delta_x","elements","ax","ay","az","bx","by","bz","cx","cy","cz","A","B","C","D","E","nsplit","Math","floor","res","u","u2","u3","u4","sqrt","cnt","feed","console","log","tmp","Image","arr","w","h","scale","skew_k","skew_b","this","plane","map","image","img","loadTexture","transparent","needsUpdate","shplane","overdraw","ImageManger","frame","run_image","run_cnt","first_run","speed","current_pos","images","a0","a1","a2","a3","b0","target_image","name","url","scene","id","remove","vec","numInterp","curveTau","length","k","num","add","rotation","set","updateMatrix","span","rad","pos","zAix","sub","atan","setRotationFromAxisAngle","applyAxisAngle","normalize","position","Samplers","v","sin","PI","SplineLine","themeColor","need_update","spline","newCurve","timeGoes","animateTime","curveUpdateDone","newCurveTau","param","splineMatrial","color","linewidth","param_cache","param_is_displaying","paramDotsGroup","last_sample","last_sample_name","param_vectors","PurgeParam","last_spline","c","splineMat","material","splineGeo","vertices","geometry","param_need_update","theme","val","i","MapColorToDiscrete","lerp","inter","verticesNeedUpdate","a","gran","at","d","push","step","first","vstep","base","j","InsertOne","p3","p4","mat3","mat1","mat2","multiplyMatrices","transpose","ComputeTransformMatrix","Compute","applyMatrix4","comb","len","dots","pointOnPlane","Sample","splineArr","last_vertex","cur","KickUpdateCurve","sample","begin","last","all","sum","sa","prox","epsilon","abs","s0","ua2","ua3","children","sample_name","Paramterize","pointGeo","dotMaterial","dot","SplineGroup","canvas","camera","planeMesh","splines","mouse_down","positions","Float32Array","drawCount","dot_hovered","line","click_raycaster","hover_raycaster","spline_ctrl_needs_update","global_tau","global_gran","dotsGroup","show_param","param_sampler_fn","linear","param_sampler_name","bifrost_save","image_manager","addAttribute","onmousemove","e","MouseHoverOrDrag","onmousedown","onmouseup","UpdateSplineOnDotMoved","onclick","HandleClick","event","setPickPosition","pickPosition","HandleDrag","setFromCamera","intersectedObjects","intersectObjects","setHex","obj","object","dotOnPlane","GetMouseOnPlane","userData","attributes","array","point","intersectObject","Append","setDrawRange","Destroy","UpdateCurve","target","RunImage","newGran","DisplayNewCurve","newTau","bool","bifrost","TestValidSplines","s","curBifrost","last_last_spline","GetImages","b","SelectImg","undefined","ShowParam","HideParam","str","CanvasManager","clearPickPosition","clientWidth","clientHeight","appendChild","mouseout","rect","getBoundingClientRect","clientX","left","clientY","top","getCanvasRelativePosition","fn","Render","handle","el_id","renderer","antialias","powerPreference","document","getElementById","domElement","Aspect","setSize","setClearColor","planegeo","render","requestAnimationFrame","HandleTau","n","HandleGran","HandleImg","run_img","HandleImgSpeed","img_speed","EnableBifrost","HandleCleanLines","Clear","ShowLinearSample","showParam","GetAllImgs","imgs","selectImg","SelectSampler","param_sampler","RunAll","props","colorGroup","elId","getImg","theimg","imgSpeed","enable_param","selectSampler","cleanup","oncleanupDone","React","Component","theTheme","createMuiTheme","palette","type","primary","main","blue","useStyles","makeStyles","root","flexGrow","paper","padding","spacing","marginTop","rawpaper","boxShadow","heading","fontSize","typography","pxToRem","flexBasis","flexShrink","button","margin","formControl","minWidth","littlePanel","width","height","detailPanel","flexDirection","Right","maxHeight","overflowY","PrettoSlider","withStyles","thumb","backgroundColor","border","marginLeft","active","valueLabel","track","borderRadius","rail","Slider","FixedMaxWidth","thediv","useRef","wrap","useEffect","current","style","ref","className","App","useState","setTau","setGran","setImg","setImgSpeed","disableRest","setDisableRest","setCleanup","setParam","imgArr","setImgArr","whichImg","setWhichImg","whichSampler","setWhichSampler","classes","ThemeProvider","CssBaseline","Grid","container","direction","item","xs","ExpansionPanel","ExpansionPanelSummary","expandIcon","Typography","ExpansionPanelDetails","Paper","onChangeCommitted","max","min","valueLabelDisplay","aria-label","defaultValue","disabled","FormControlLabel","control","Switch","checked","onChange","value","inputProps","label","FormControl","variant","InputLabel","htmlFor","Select","key","MenuItem","Object","keys","Fab","onClick","Boolean","window","location","hostname","match","ReactDOM","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2c3f065a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/a0.79715c11.png\";","module.exports = __webpack_public_path__ + \"static/media/b0.c6545c82.png\";","module.exports = __webpack_public_path__ + \"static/media/a1.9ad46e8e.png\";","module.exports = __webpack_public_path__ + \"static/media/a2.cf4f4a6d.png\";","module.exports = __webpack_public_path__ + \"static/media/a3.925c5007.png\";","import * as THREE from 'three'\r\nexport function MapColorToDiscrete(val /* [0, 1] */) { // -> [100, 200, ..., 900]\r\n    const k = [0,  0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1, 2]\r\n    const v = [50, 100, 200, 300, 400, 500, 600, 700, 800, 900, 900]\r\n    for(let i = 0; i < k.length; ++i) {\r\n        if(val < k[i+1]) {\r\n            return v[i]\r\n        }\r\n    }\r\n}\r\n\r\n// estimate curvature\r\nexport function BeginingPrime(tau, p0, p1, p2) {\r\n    let p0_prime = new THREE.Vector3();\r\n    let p1_prime = new THREE.Vector3();\r\n\r\n    p0_prime.x = tau * (2*p1.x-p2.x-p0.x)\r\n    p0_prime.y = tau * (2*p1.y-p2.y-p0.y)\r\n    p0_prime.z = 0 // tau * (2*p1.z-p2.z-p0.z)\r\n\r\n    p1_prime.addVectors(p0.clone().negate(), p2).multiplyScalar(tau)\r\n    return [p0_prime, p1_prime]\r\n}\r\n\r\n\r\nexport function Integration(mat, ua, ub, delta_x) {\r\n    let p1 = mat.elements\r\n    \r\n    //let ax = p1[0]\r\n    //let bx = p1[1]\r\n    //let cx = p1[2]\r\n    //let ay = p1[4]\r\n    //let by = p1[5]\r\n    //let cy = p1[6]\r\n    //let az = p1[8]\r\n    //let bz = p1[9]\r\n    //let cz = p1[10]\r\n\r\n    let ax = p1[0]\r\n    let ay = p1[1]\r\n    let az = p1[2]\r\n    let bx = p1[4]\r\n    let by = p1[5]\r\n    let bz = p1[6]\r\n    let cx = p1[8]\r\n    let cy = p1[9]\r\n    let cz = p1[10]\r\n\r\n    let A = 9*(ax*ax+ay*ay+az*az)\r\n    let B = 12*(ax*bx+ay*by+az*bz)\r\n    let C = 6*(ax*cx+ay*cy+az*cz)+4*(bx*bx+by*by+bz*bz)\r\n    let D = 4*(bx*cx+by*cy+bz*cz)\r\n    let E = cx*cx+cy*cy+cz*cz\r\n\r\n    let nsplit = Math.floor((ub-ua)/delta_x)\r\n    let res = 0\r\n    if(nsplit < 3) {\r\n        for(let u = ua; u <= ub; u += delta_x) {\r\n            let u2 = u*u\r\n            let u3 = u2*u\r\n            let u4 = u2*u2\r\n            \r\n            let tmp = Math.sqrt(A*u4+B*u3+C*u2+D*u+E)\r\n            res += tmp\r\n        }\r\n        return res * delta_x\r\n    }\r\n    let cnt = 0\r\n    \r\n    for(let u = ua; u <= ub; u += delta_x) {\r\n        let u2 = u*u\r\n        let u3 = u2*u\r\n        let u4 = u2*u2\r\n        let feed = A*u4+B*u3+C*u2+D*u+E\r\n        if(feed < 0) {\r\n            console.log('hi')\r\n        }\r\n        let tmp = Math.sqrt(feed)\r\n        //let tmp = A*u4+B*u3+C*u2+D*u+E\r\n        if(cnt === 0) {\r\n            res += tmp * delta_x\r\n        }\r\n        else if(cnt === nsplit) {\r\n            res += tmp * delta_x\r\n        }\r\n        else if(cnt % 2 === 1) {\r\n            res += 4 * tmp * delta_x\r\n        }\r\n        else {\r\n            res += 2 * tmp * delta_x\r\n        }\r\n        ++cnt\r\n    }\r\n    return res / 3\r\n}\r\n\r\n\r\nexport function ComputeTransformMatrix(p1, p2, p3, p4) {\r\n    let mat1 = new THREE.Matrix4()\r\n    mat1.set(\r\n        2, -2, 1, 1,\r\n        -3, 3, -2, -1,\r\n        0, 0, 1, 0,\r\n        1, 0, 0, 0\r\n    )\r\n    let mat2 = new THREE.Matrix4()\r\n    mat2.set(\r\n        p1.x, p1.y, p1.z, 0,\r\n        p2.x, p2.y, p2.z, 0,\r\n        p3.x, p3.y, p3.z, 0,\r\n        p4.x, p4.y, p4.z, 0,\r\n    )\r\n    let mat3 = new THREE.Matrix4()\r\n    mat3.multiplyMatrices(mat1, mat2)\r\n    mat3.transpose()\r\n    return mat3\r\n}","import * as THREE from 'three'\r\nimport a0 from './shino/a0.png'\r\nimport a1 from './shino/a1.png'\r\nimport a2 from './shino/a2.png'\r\nimport a3 from './shino/a3.png'\r\n\r\nimport b0 from './shino/b0.png'\r\n\r\nimport { BeginingPrime } from './utils'\r\n\r\nclass Image {\r\n\r\n    constructor(arr, w, h, scale, skew_k, skew_b) {\r\n        this.plane = arr.map((image)=>{\r\n            let img = new THREE.MeshBasicMaterial({ //CHANGED to MeshBasicMaterial\r\n                map:THREE.ImageUtils.loadTexture(image),\r\n                transparent: true,\r\n            });\r\n            img.map.needsUpdate = true; //ADDED\r\n            let shplane = new THREE.Mesh(new THREE.PlaneGeometry(w, h),img);\r\n            shplane.overdraw = true;\r\n            return shplane\r\n        })\r\n\r\n        this.scale = scale\r\n        this.skew_k = skew_k\r\n        this.skew_b = skew_b\r\n    }\r\n}\r\n\r\nexport class ImageManger {\r\n    frame = 0\r\n    run_image = false\r\n    run_cnt = 0\r\n    first_run = true\r\n    speed = 1.0\r\n    current_pos = 0\r\n\r\n    images = [\r\n        new Image([a0, a1, a2, a3], 0.75, 0.8, 0.30, 1.015, -0.06),\r\n        new Image([b0],             0.6,  1.0, 0.44, 1.015, 0.02),\r\n    ]\r\n    GetImages() {\r\n        return [\r\n            {name: '小新 & 美伢', url: a0},\r\n            {name: '小新', url: b0},\r\n        ]\r\n    }\r\n    \r\n    constructor() {\r\n        this.target_image = this.images[0]\r\n    }\r\n\r\n    SelectImg(scene, id) {\r\n        if(this.run_image && this.first_run === false) {\r\n            scene.remove(this.target_image.plane[this.frame]);\r\n        }\r\n        this.target_image = this.images[id]\r\n    }\r\n\r\n    RunImage(scene, vec, numInterp, curveTau) {\r\n        if(this.run_image === false || vec === null) {\r\n            if(this.first_run === false) {\r\n                scene.remove(this.target_image.plane[this.frame]);\r\n                this.first_run = true\r\n            }\r\n            return\r\n        }\r\n\r\n        if(vec.length <= 1) {\r\n            return\r\n        }\r\n\r\n        ++this.run_cnt\r\n        const k = -14.0/80\r\n        const b = 15-20*k\r\n        let num = Math.floor((numInterp*k+b) / this.speed)\r\n        if(num === 0) {\r\n            num = 1\r\n        }\r\n        if(this.run_cnt % num === 0) {\r\n            ++this.current_pos\r\n            this.run_cnt = 0\r\n            if(!this.first_run) {\r\n                scene.remove(this.target_image.plane[this.frame])\r\n            }\r\n            ++this.frame\r\n            this.frame = this.frame % this.target_image.plane.length\r\n            scene.add(this.target_image.plane[this.frame])\r\n        }\r\n        else {\r\n            return\r\n        }\r\n    \r\n        if(this.first_run === true) {\r\n            this.frame = 0\r\n            this.current_pos = 0\r\n            this.first_run = false\r\n        }\r\n        \r\n        const plane = this.target_image.plane[this.frame]\r\n        if(vec.length - 1 < this.current_pos) {\r\n            plane.rotation.set(0, 0, 0)\r\n            plane.updateMatrix();\r\n            this.current_pos = 0\r\n        }\r\n        \r\n        let current_pos = this.current_pos\r\n        let pos = vec[current_pos]\r\n        \r\n        const zAix = new THREE.Vector3(0,0,1)\r\n        let span;\r\n        if(this.current_pos === 0) {\r\n            span = BeginingPrime(curveTau, vec[0], vec[1], vec[2])[0]\r\n        }\r\n        else if(this.current_pos == vec.length-1) {\r\n            span = BeginingPrime(curveTau, vec[current_pos-2], vec[current_pos-1], vec[current_pos])[1].negate()\r\n        }\r\n        else {\r\n            span = vec[current_pos+1].clone().sub(vec[current_pos-1])\r\n        }\r\n        \r\n        let rad ;\r\n        if(span.x === 0) {\r\n            rad = 3.1415926 / 2\r\n            rad = span.y > 0? span.y : (-span.y)\r\n        }\r\n        else {\r\n           rad = Math.atan(span.y/span.x)\r\n        }\r\n        let scale = this.target_image.scale\r\n        let skew_k = this.target_image.skew_k\r\n        let skew_b = this.target_image.skew_b\r\n        this.target_image.plane[this.frame].setRotationFromAxisAngle(zAix, rad*skew_k-skew_b)\r\n        span.applyAxisAngle(zAix, 3.1415926/2).normalize().multiplyScalar(scale)\r\n        this.target_image.plane[this.frame].position.set(pos.x+span.x, pos.y+span.y, pos.z+span.z)\r\n    }\r\n\r\n}","import * as THREE from 'three'\r\n\r\nimport { MapColorToDiscrete, BeginingPrime, Integration, ComputeTransformMatrix } from './utils'\r\nimport { ImageManger } from './imageman'\r\n\r\n\r\n\r\nexport const Samplers = {\r\n    'linear': (v)=>v,\r\n    'ease in square': (v)=>v*v,\r\n    'ease in cubic': (v)=>v*v*v,\r\n    'ease in sine': (v)=> 1+Math.sin((v-1) * Math.PI / 2),\r\n    'ease out sine': (v)=> Math.sin(v * Math.PI / 2),\r\n    'ease in out sine': (v)=> (Math.sin((v-0.5)*Math.PI) + 1)/2\r\n}\r\n\r\nexport class SplineLine {\r\n    need_update = false\r\n    spline = null\r\n    newCurve = null\r\n    timeGoes = 0\r\n    animateTime = 20\r\n    curveUpdateDone = null // callback when update is done\r\n    themeColor = null\r\n    curveTau = 0.5\r\n    newCurveTau = 0.5\r\n    param = []\r\n    splineMatrial = new THREE.LineBasicMaterial( { color: 0xcccccc, linewidth: 2.2 } );\r\n    scene = null\r\n    param_cache = []\r\n    param_is_displaying = false\r\n    paramDotsGroup = new THREE.Group()\r\n\r\n    constructor(scene, themeColor) {\r\n        this.scene = scene\r\n        this.themeColor = themeColor\r\n    }\r\n\r\n    Destroy(){\r\n        if(this.spline !== null){\r\n            this.scene.remove(this.spline)\r\n            this.PurgeParam()\r\n        }\r\n    }\r\n\r\n    clone() {\r\n        let last_spline = this.spline\r\n        let c = new SplineLine(this.scene, this.themeColor)\r\n        let splineMat = new THREE.LineBasicMaterial( { color: last_spline.material.color.clone(), linewidth: 2.7 } );\r\n        let splineGeo = new THREE.Geometry();\r\n        splineGeo.vertices = last_spline.geometry.vertices.map(v => v.clone())\r\n        c.spline = new THREE.Line(splineGeo, splineMat)\r\n        c.curveTau = this.curveTau\r\n        c.param = this.param.map((v)=>v.clone())\r\n        c.curveUpdateDone = this.curveUpdateDone\r\n        return c\r\n    }\r\n\r\n    KickUpdateCurve() {\r\n        this.param_need_update = true\r\n        this.curveTau = this.newCurveTau\r\n        this.timeGoes = 0\r\n    }\r\n    \r\n    UpdateCurve() {\r\n        if(this.newCurve === null || this.spline === null) {\r\n            return\r\n        }\r\n\r\n        ++this.timeGoes;\r\n        \r\n        let theme = this.themeColor[MapColorToDiscrete(this.curveTau)]\r\n        if(this.timeGoes >= this.animateTime) {\r\n            this.spline.geometry.vertices = this.newCurve\r\n            this.newCurve = null\r\n            this.spline.material.color.set(theme)\r\n            if(this.curveUpdateDone !== null) {\r\n                this.curveUpdateDone()\r\n                this.param_need_update = true\r\n            }\r\n        }\r\n        else {\r\n            let scale = 1 / (this.animateTime - this.timeGoes)\r\n            this.spline.material.color.lerp(new THREE.Color(theme), scale)\r\n            \r\n            for(let i = 0; i < this.newCurve.length; ++i) {\r\n                let inter = this.newCurve[i].clone().sub( this.spline.geometry.vertices[i])\r\n                this.spline.geometry.vertices[i].add(inter.multiplyScalar(scale))\r\n            }\r\n        }\r\n        this.spline.geometry.verticesNeedUpdate = true\r\n    }\r\n\r\n\r\n    Sample(a, tau, gran) {\r\n        let res = []\r\n        this.param = []\r\n        this.newCurveTau = tau\r\n\r\n        function at(id) {\r\n            return a[id].position\r\n        }\r\n\r\n        if(a.length <= 1) {\r\n            for(let d of a) {\r\n                res.push(d.position)\r\n            }\r\n            this.newCurve = res\r\n            return this\r\n        }\r\n        else if(a.length === 2) {\r\n            let step = 1.0 / gran\r\n            res.push(at(0))\r\n            let first = at(0)\r\n            let vstep = at(1).clone().sub(first).multiplyScalar(step)\r\n            let base =  first.clone().add(vstep)\r\n            for(let j = 1; j < gran-1; ++j) {\r\n                res.push(base.add(vstep).clone())\r\n            }\r\n            res.push(at(1))\r\n            this.newCurve = res\r\n            return this\r\n        }\r\n\r\n        let InsertOne = (p1, p2, p3, p4) => {\r\n            let mat3 = ComputeTransformMatrix(p1, p2, p3, p4)\r\n            this.param.push(mat3)\r\n            return mat3\r\n        }\r\n\r\n        function Compute(u, mat) {\r\n            let u2 = u*u\r\n            let u3 =u2*u\r\n            let vec = new THREE.Vector4(u3, u2, u, 1)\r\n            vec.applyMatrix4(mat)\r\n            res.push(new THREE.Vector3(vec.x, vec.y, vec.z))\r\n        }\r\n\r\n        let comb = BeginingPrime(tau, at(0), at(1), at(2))\r\n        let step = 1.0 / gran\r\n        let u = step\r\n        res.push(at(0).clone())\r\n        let mat = InsertOne(at(0), at(1), comb[0], comb[1])\r\n        for(let j = 1; j < gran-1; ++j) {\r\n            Compute(u, mat)\r\n            u += step\r\n        }\r\n        \r\n        let len = a.length - 2\r\n        for(let i=1; i < len; ++i) {\r\n            u = step\r\n            res.push(at(i).clone())\r\n            let p1 = at(i)\r\n            let p2 = at(i+1)\r\n            let p3 = at(i-1).clone().negate().add(p2).multiplyScalar(tau)\r\n            let p4 = p1.clone().negate().add(at(i+2)).multiplyScalar(tau)\r\n            let mat = InsertOne(p1, p2, p3, p4)\r\n            for(let j = 1; j < gran-1; ++j) {\r\n                Compute(u, mat)\r\n                u += step\r\n            }\r\n        }\r\n\r\n        res.push(at(len).clone())\r\n        comb = BeginingPrime(tau, at(len-1), at(len), at(len+1))\r\n        u = step\r\n        comb[0].negate()\r\n        mat = InsertOne(at(len), at(len+1), comb[1], comb[0])\r\n        for(let j = 1; j < gran-1; ++j) {\r\n            Compute(u, mat)\r\n            u += step\r\n        }\r\n        res.push(at(len+1).clone())\r\n        this.newCurve = res\r\n        return this\r\n    }\r\n\r\n    Append(dots, numInterp, pointOnPlane) {\r\n        let scene = this.scene\r\n        let splineGeo = new THREE.Geometry();\r\n\r\n        this.Sample(dots, this.curveTau, numInterp);\r\n        let splineArr = this.newCurve\r\n\r\n        if(this.spline !== null) {\r\n            if(this.newCurve.length > numInterp) {\r\n                splineGeo.vertices = this.spline.geometry.vertices\r\n                let last_vertex = this.spline.geometry.vertices[this.spline.geometry.vertices.length - 1]\r\n                let step = pointOnPlane.clone().sub(last_vertex).multiplyScalar(1.0/numInterp)\r\n                let cur = last_vertex.clone().add(step)\r\n                for(let i = 1; i < numInterp; ++i) {\r\n                    splineGeo.vertices.push(cur.add(step).clone())\r\n                }\r\n                this.KickUpdateCurve()\r\n            }\r\n            else {\r\n                splineGeo.vertices = this.newCurve\r\n            }\r\n            scene.remove(this.spline)\r\n        }\r\n        else {\r\n            splineGeo.vertices = splineArr\r\n        }\r\n        \r\n        let spline = new THREE.Line( splineGeo, this.splineMatrial );\r\n        this.spline = spline\r\n        scene.add(spline)\r\n    }\r\n\r\n    DisplayNewCurve() {\r\n        let splineGeo = new THREE.Geometry();\r\n        splineGeo.vertices = this.newCurve\r\n        let spline = new THREE.Line( splineGeo, this.splineMatrial );\r\n        this.scene.remove(this.spline)\r\n        this.spline = spline\r\n        this.scene.add(spline)\r\n    }\r\n    \r\n    UpdateParam() {\r\n        if(this.param_is_displaying) {\r\n            // this.ShowParam(this.last_sample, )\r\n        }\r\n        \r\n    }\r\n\r\n    last_sample = null\r\n    Paramterize(sample, begin, last, gran) {\r\n        let param_cache = this.param_cache\r\n        this.last_sample = sample\r\n\r\n        if(this.spline === null || this.spline.geometry.vertices.length < gran) {\r\n            return\r\n        }\r\n    \r\n        let num = begin\r\n        let all = 0\r\n        while(num !== last-1) {\r\n            param_cache[num] = Integration(this.param[num], 0, 1, 0.01)\r\n            all += param_cache[num]\r\n            ++num\r\n        }\r\n        param_cache = param_cache.map((h)=>h/all) // normalize\r\n    \r\n        let sum = 0\r\n        let len = (last - begin - 1) * gran\r\n        let step = 1 / len\r\n        let cur = step\r\n        num = begin\r\n        let res = []\r\n        while(cur < 1) {\r\n            let sa = sample(cur)\r\n            while(sum < sa) {\r\n                sum += param_cache[num]\r\n                ++num\r\n            }\r\n            \r\n            let prox = sum - param_cache[num-1]\r\n            let epsilon = Math.abs(sa - prox)\r\n            let ua = 0\r\n            let ub = 1\r\n            while(epsilon > 0.001) {\r\n                let s0 = Integration(this.param[num-1], ua, (ua+ub)/2, 0.001) / all\r\n                if(s0 === 0) {\r\n                    break\r\n                }\r\n                if((prox + s0) > sa) {\r\n                    ub = (ua+ub)/2\r\n                }\r\n                else {\r\n                    prox += s0\r\n                    ua = (ua+ub)/2\r\n                }\r\n                epsilon = sa - prox\r\n            }\r\n    \r\n            let ua2 = ua * ua\r\n            let ua3 = ua * ua2\r\n            let vec = new THREE.Vector4(\r\n                ua3, ua2, ua, 1\r\n            )\r\n            vec.applyMatrix4(this.param[num-1])\r\n            res.push(new THREE.Vector3(vec.x, vec.y, vec.z))\r\n            cur += step\r\n        }\r\n        return res\r\n    }\r\n\r\n    last_sample_name = 'linear'\r\n    param_vectors = []\r\n    PurgeParam() {\r\n        this.paramDotsGroup.children = []\r\n        this.param_need_update = true\r\n        this.scene.remove(this.paramDotsGroup)\r\n    }\r\n\r\n\r\n    ShowParam(sample_name, begin, last, gran) {\r\n        if(last - begin < 2) {\r\n            return\r\n        }\r\n\r\n        // hot reload sampler function, bypass testing\r\n        if(sample_name !== this.last_sample_name) {\r\n            this.param_is_displaying = false\r\n            this.param_need_update = true\r\n        }\r\n\r\n        // already shown\r\n        if(this.param_is_displaying === true) {\r\n            return\r\n        }\r\n\r\n        // re-show param line when data hasn't been updated\r\n        if(this.param_need_update === false) {\r\n            this.scene.add(this.paramDotsGroup)\r\n            return\r\n        }\r\n\r\n        this.PurgeParam(); \r\n        this.param_is_displaying = true\r\n        this.scene.add(this.paramDotsGroup)\r\n\r\n        this.param_need_update = false\r\n\r\n        let arr = this.Paramterize(Samplers[sample_name], begin, last, gran)\r\n        this.param_vectors = arr\r\n        for(let i of arr) {\r\n            let pointGeo = new THREE.CircleGeometry( 0.04, 8 );\r\n            let dotMaterial = new THREE.MeshBasicMaterial( { color: 0xeeeeee } );\r\n            let dot = new THREE.Mesh( pointGeo, dotMaterial );\r\n\r\n            dot.position.set(i.x, i.y, i.z)\r\n            this.paramDotsGroup.add(dot)\r\n        }\r\n        \r\n    }\r\n\r\n    HideParam() {\r\n        \r\n        this.scene.remove(this.paramDotsGroup)\r\n        this.param_is_displaying = false\r\n    }\r\n}\r\n\r\n\r\n\r\nexport class SplineGroup {\r\n    splines = []\r\n    canvas = null\r\n    camera = null\r\n    planeMesh = null\r\n\r\n    mouse_down = false\r\n\r\n    geometry = new THREE.BufferGeometry();\r\n    material = new THREE.LineBasicMaterial( { color: 0xcccccc, linewidth: 2.7 } );\r\n    positions = new Float32Array( 100 * 3 );\r\n    drawCount = 0\r\n    dot_hovered = null\r\n    line = null\r\n    click_raycaster = new THREE.Raycaster();\r\n    hover_raycaster = new THREE.Raycaster();\r\n    mouse_down = false\r\n    camera = null\r\n    canvas = null\r\n    spline_ctrl_needs_update = false\r\n    global_tau = 0.5\r\n    global_gran = 20\r\n    dotsGroup = new THREE.Group()\r\n    scene\r\n    themeColor\r\n    show_param = false\r\n    param_sampler_fn = Samplers.linear\r\n    param_sampler_name = 'linear'\r\n\r\n    constructor(scene, canvas, camera, planeMesh, themeColor) {\r\n        this.scene = scene\r\n        this.canvas = canvas\r\n        this.camera = camera\r\n        this.planeMesh = planeMesh\r\n        this.themeColor = themeColor\r\n        this.geometry.addAttribute( 'position', new THREE.BufferAttribute( this.positions, 3 ) );\r\n        this.line = new THREE.Line( this.geometry,  this.material );\r\n        this.splines.push(new SplineLine(scene, themeColor))\r\n\r\n        scene.add(this.line)\r\n        scene.add(this.dotsGroup)\r\n        canvas.onmousemove = (e)=>{this.MouseHoverOrDrag(e)}\r\n        canvas.onmousedown = ()=> {this.mouse_down = true }\r\n        canvas.onmouseup = ()=>{this.mouse_down = false; this.UpdateSplineOnDotMoved(); }\r\n        canvas.onclick = (e)=>{this.HandleClick(e)}\r\n    }\r\n    \r\n    MouseHoverOrDrag(event) {\r\n        this.canvas.setPickPosition(event)\r\n        let pickPosition = this.canvas.pickPosition\r\n\r\n        if(this.dot_hovered && this.mouse_down) {\r\n            this.HandleDrag()\r\n            return\r\n        }\r\n    \r\n        this.hover_raycaster.setFromCamera(pickPosition, this.camera);\r\n        const intersectedObjects = this.hover_raycaster.intersectObjects(this.dotsGroup.children);\r\n        if(this.dot_hovered !== null) {\r\n            this.dot_hovered.material.color.setHex( 0xffffff );\r\n            this.dot_hovered = null\r\n        }\r\n        if (intersectedObjects.length) {\r\n            const obj = intersectedObjects[0].object\r\n            obj.material.color.setHex( 0xFFF176 );\r\n            this.dot_hovered = obj\r\n        }\r\n        \r\n    }\r\n\r\n    HandleDrag() {\r\n        let dotOnPlane = this.GetMouseOnPlane()\r\n        this.dot_hovered.position.set(dotOnPlane.x, dotOnPlane.y, dotOnPlane.z)\r\n        let id = this.dot_hovered.userData.id * 3\r\n        \r\n        let arr = this.line.geometry.attributes.position.array \r\n        arr[id]  = dotOnPlane.x\r\n        arr[id+1]= dotOnPlane.y\r\n        arr[id+2]= dotOnPlane.z\r\n        this.line.geometry.attributes.position.needsUpdate = true\r\n        this.spline_ctrl_needs_update = true\r\n    }\r\n\r\n    GetMouseOnPlane() {\r\n        let pickPosition = this.canvas.pickPosition\r\n        let click_raycaster = this.click_raycaster\r\n        let point = new THREE.Vector3(pickPosition.x, pickPosition.y, 5);\r\n        click_raycaster.setFromCamera(point, this.camera);\r\n        let hits = click_raycaster.intersectObject(this.planeMesh,true);\r\n        return hits[0].point;\r\n    }\r\n\r\n    UpdateSplineOnDotMoved() {\r\n        if(!this.spline_ctrl_needs_update) {\r\n            return\r\n        }\r\n        for(let spline of this.splines) {\r\n            spline.Sample(this.dotsGroup.children, this.global_tau, this.global_gran).KickUpdateCurve()\r\n        }\r\n        this.spline_ctrl_needs_update = false\r\n    }\r\n\r\n    HandleClick(event) {\r\n        if(this.dot_hovered !== null) {\r\n            return\r\n        }\r\n        \r\n        this.canvas.setPickPosition(event)\r\n        let pointOnPlane = this.GetMouseOnPlane()\r\n\r\n        let dotsGroup = this.dotsGroup\r\n        let pointGeo = new THREE.CircleGeometry( 0.06, 12 );\r\n        let dotMaterial = new THREE.MeshBasicMaterial( { color: 0xffffff } );\r\n        let dot = new THREE.Mesh( pointGeo, dotMaterial );\r\n        dot.position.set(pointOnPlane.x, pointOnPlane.y, pointOnPlane.z)\r\n        dot.userData = { id: dotsGroup.children.length }\r\n        dotsGroup.add( dot );\r\n        \r\n        for(let s of this.splines) {\r\n            s.Append(this.dotsGroup.children, this.global_gran, pointOnPlane)\r\n        }\r\n\r\n        let positions = this.line.geometry.attributes.position.array;\r\n        positions[3 * this.drawCount] = pointOnPlane.x\r\n        positions[3 * this.drawCount + 1] = pointOnPlane.y\r\n        positions[3 * this.drawCount + 2] = pointOnPlane.z\r\n        ++this.drawCount;\r\n        this.line.geometry.setDrawRange(0, this.drawCount)\r\n        this.line.geometry.attributes.position.needsUpdate = true\r\n        this.MouseHoverOrDrag(event)\r\n    }\r\n\r\n    set gran(newGran) {\r\n        if(this.global_gran === newGran) {\r\n            return\r\n        }\r\n    \r\n        this.global_gran = newGran\r\n        for(let s of this.splines) {\r\n            s.Sample(this.dotsGroup.children, this.global_tau, this.global_gran).DisplayNewCurve()\r\n        }\r\n    }\r\n\r\n    set tau(newTau) {\r\n        if(this.global_tau === newTau) {\r\n            return\r\n        }\r\n\r\n        this.global_tau = newTau\r\n        for(let s of this.splines) {\r\n            s.Sample(this.dotsGroup.children, this.global_tau, this.global_gran).KickUpdateCurve()\r\n        }\r\n    }\r\n\r\n    TestValidSplines() {\r\n        for(let s of this.splines) {\r\n            if(s.spline != null) {\r\n                return true\r\n            }\r\n        }\r\n        return false\r\n    }\r\n\r\n    bifrost_save = {\r\n        splines: null,\r\n        global_tau: 0.5\r\n    }\r\n\r\n    set bifrost(bool) {\r\n        let bifrost = this.bifrost_save.splines\r\n        let scene = this.scene\r\n        if((bifrost !== null) === bool || this.TestValidSplines() === false || this.dotsGroup.children.length <= 2) {\r\n            return\r\n        }\r\n    \r\n        if(bool === false) {\r\n            for(let i = 0; i < this.splines.length; ++i) {\r\n                this.scene.remove(this.splines[i].spline)\r\n            }\r\n            this.global_tau = this.bifrost_save.global_tau\r\n            this.splines = this.bifrost_save.splines\r\n            for(let s of this.splines) {\r\n                this.scene.add(s.spline)\r\n            }\r\n            this.bifrost_save.splines = null\r\n            return \r\n        }\r\n\r\n        this.bifrost_save.splines = this.splines\r\n        this.bifrost_save.global_tau = this.global_tau\r\n        let last_spline = this.splines[0]\r\n\r\n        for(let s of this.splines) {\r\n            scene.remove(s.spline)\r\n        }\r\n        this.splines = []\r\n\r\n        const k = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1]\r\n        \r\n        let curBifrost = 0\r\n        \r\n        last_spline.curveUpdateDone = () => {\r\n            if(curBifrost === k.length) {\r\n                last_spline.curveUpdateDone = null\r\n                return\r\n            }\r\n\r\n            let last_last_spline = last_spline\r\n            last_spline = last_spline.clone()\r\n            last_last_spline.curveUpdateDone = null\r\n\r\n            this.scene.add(last_spline.spline)\r\n            last_spline.Sample(this.dotsGroup.children, k[curBifrost], this.global_gran).KickUpdateCurve()\r\n            this.splines.push(last_spline)\r\n            ++curBifrost\r\n        }\r\n        last_spline.curveUpdateDone()\r\n    }\r\n\r\n    image_manager = new ImageManger()\r\n    set run_img(bool) {\r\n        this.image_manager.run_image = bool\r\n    }\r\n\r\n    set img_speed(val) {\r\n        this.image_manager.speed = val\r\n    }\r\n\r\n    get imgs() {\r\n        return this.image_manager.GetImages()\r\n    }\r\n\r\n    set selectImg(b){\r\n        this.image_manager.SelectImg(this.scene, b)\r\n    }\r\n\r\n    set showParam(b) {\r\n        if(this.show_param === b || b === undefined) {\r\n            return\r\n        }\r\n        \r\n        this.show_param = b\r\n        if(this.show_param == true) {\r\n            for(let s of this.splines) {\r\n                s.ShowParam(this.param_sampler_name, 0, this.dotsGroup.children.length, this.global_gran)\r\n            }\r\n        }\r\n        else {\r\n            for(let s of this.splines) {\r\n                s.HideParam()\r\n            }\r\n        }\r\n    }\r\n\r\n    set param_sampler(str) {\r\n        if(str) {\r\n            this.param_sampler_fn = Samplers[str]\r\n            this.param_sampler_name = str\r\n            if(this.show_param) {\r\n                for(let s of this.splines) {\r\n                    s.ShowParam(this.param_sampler_name, 0, this.dotsGroup.children.length, this.global_gran)\r\n                }\r\n            }\r\n            \r\n        }\r\n    }\r\n\r\n    Clear() {\r\n        this.image_manager.run_image = false\r\n        this.bifrost_save.splines = null\r\n        for(let s of this.splines) {\r\n            s.Destroy()\r\n        }\r\n        this.splines = [\r\n            new SplineLine(this.scene, this.themeColor)\r\n        ]\r\n        \r\n        let dotsGroup = this.dotsGroup\r\n        while(dotsGroup.children.length) {\r\n            dotsGroup.remove(dotsGroup.children[0])\r\n        }\r\n\r\n        \r\n        this.drawCount = 0\r\n        this.line.geometry.setDrawRange(0, this.drawCount)\r\n        this.line.geometry.attributes.position.needsUpdate = true\r\n    }\r\n\r\n    Render() {\r\n        for(let s of this.splines) {\r\n            s.UpdateCurve()\r\n        }\r\n        let target = null\r\n        if(this.splines.length && this.splines[0].spline){\r\n            if(this.show_param === false) {\r\n                target = this.splines[0].spline.geometry.vertices\r\n            }\r\n            else{\r\n                target = this.splines[0].param_vectors\r\n            }\r\n        }\r\n        \r\n        this.image_manager.RunImage(this.scene, target, this.global_gran, this.splines[0].curveTau)\r\n    }\r\n}\r\n\r\n\r\nexport class CanvasManager {\r\n    canvas = null\r\n    w = 0\r\n    h = 0\r\n    pickPosition = {\r\n        x: 0,\r\n        y: 0\r\n    }\r\n    frame = null\r\n\r\n    constructor(frame, canvas) {\r\n        this.clearPickPosition()\r\n        this.canvas = canvas\r\n        this.w = frame.clientWidth\r\n        this.h = frame.clientHeight\r\n        frame.appendChild(canvas)\r\n        frame.mouseout = ()=> this.clearPickPosition()\r\n        this.frame = frame\r\n    }\r\n    \r\n    set onmousemove(fn) {\r\n        this.frame.onmousemove = fn\r\n    }\r\n\r\n    set onmousedown(fn) {\r\n        this.frame.onmousedown = fn\r\n    }\r\n\r\n    set onmouseup(fn) {\r\n        this.frame.onmouseup = fn\r\n    }\r\n\r\n    set onclick(fn) {\r\n        this.frame.onclick = fn\r\n    }\r\n\r\n    Aspect() {\r\n        return this.w / this.h\r\n    }\r\n\r\n    getCanvasRelativePosition(event) {\r\n        const rect = this.canvas.getBoundingClientRect();\r\n        return {\r\n          x: event.clientX - rect.left,\r\n          y: event.clientY - rect.top,\r\n        };\r\n    }\r\n\r\n    setPickPosition(event) {\r\n        let pickPosition = this.pickPosition\r\n        const pos = this.getCanvasRelativePosition(event);\r\n        pickPosition.x = (pos.x / this.w) *  2 - 1;\r\n        pickPosition.y = (pos.y / this.h) * -2 + 1;  // note we flip Y\r\n    }\r\n\r\n    clearPickPosition() {\r\n        let pickPosition = this.pickPosition\r\n        pickPosition.x = -100000;\r\n        pickPosition.y = -100000;\r\n    }\r\n}","import React from 'react';\r\nimport * as THREE from 'three'\r\nimport { CanvasManager, SplineGroup } from './spline'\r\n\r\nexport default class Render extends React.Component {\r\n    componentDidMount() {\r\n        this.handle = RunAll(this.props.colorGroup, this.props.elId)\r\n        if(this.props.getImg !== undefined){\r\n            this.props.getImg(this.handle.GetAllImgs())\r\n        }\r\n        \r\n    }\r\n    render() {\r\n        if(this.handle !== undefined) {\r\n            this.handle.HandleTau(this.props.tau)\r\n            this.handle.HandleGran(this.props.gran)\r\n            this.handle.HandleImg(this.props.theimg)\r\n            this.handle.HandleImgSpeed(this.props.imgSpeed)\r\n            this.handle.EnableBifrost(this.props.bifrost)\r\n            this.handle.ShowLinearSample(this.props.enable_param)\r\n            this.handle.SelectImg(this.props.selectImg)\r\n            this.handle.SelectSampler(this.props.selectSampler)\r\n            if(this.props.cleanup === true) {\r\n                this.handle.HandleCleanLines()\r\n                this.props.oncleanupDone()\r\n            }\r\n        }\r\n        return (\r\n            <div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nfunction RunAll(themeColor, el_id){\r\nconst scene = new THREE.Scene();\r\nconst renderer = new THREE.WebGLRenderer({antialias : true, powerPreference:'high-performance'});\r\nconst canvas = new CanvasManager(document.getElementById(el_id), renderer.domElement);\r\nconst camera = new THREE.PerspectiveCamera(75, canvas.Aspect(), 0.1, 1000);\r\n\r\nrenderer.setSize(canvas.w, canvas.h);\r\nrenderer.setClearColor(0x000000, 1.0);\r\n\r\ncamera.position.z = 5;\r\n\r\nconst planegeo = new THREE.PlaneGeometry( 1000, 1000, 10, 10 );\r\nconst planeMesh = new THREE.Mesh(planegeo, new THREE.MeshBasicMaterial());\r\nconst spline = new SplineGroup(scene, canvas, camera, planeMesh, themeColor)\r\n\r\nfunction render() {\r\n    requestAnimationFrame(render);\r\n    spline.Render()\r\n    renderer.render(scene, camera);\r\n}\r\nrender();\r\n\r\nreturn {\r\n    HandleTau: (n)=>{spline.tau = n},\r\n    HandleGran: (n)=>{spline.gran = n },\r\n    HandleImg: (b)=>{spline.run_img = b},\r\n    HandleImgSpeed: (n)=>{spline.img_speed = n},\r\n    EnableBifrost: (b)=>{spline.bifrost = b},\r\n    HandleCleanLines: ()=>{ spline.Clear() },\r\n    ShowLinearSample: (b)=>{ spline.showParam = b},\r\n    GetAllImgs: ()=>{return spline.imgs},\r\n    SelectImg: (i)=>{spline.selectImg=i},\r\n    SelectSampler:(i)=>{spline.param_sampler=i}\r\n}\r\n\r\n}\r\n","import React, {useEffect, useState, useRef} from 'react';\nimport './App.css';\nimport Render from './render'\nimport { createMuiTheme } from '@material-ui/core/styles';\nimport { ThemeProvider } from '@material-ui/styles';\nimport { green, orange, blue } from '@material-ui/core/colors';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport Slider from '@material-ui/core/Slider';\nimport Typography from '@material-ui/core/Typography';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Switch from '@material-ui/core/Switch';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\n\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Fab from '@material-ui/core/Fab';\nimport DeleteIcon from '@material-ui/icons/Delete';\n\nimport {Samplers} from './spline'\n\nconst theTheme = createMuiTheme({\n  palette: {\n    type: 'dark',\n    primary:{\n      main: blue[500]\n    }\n  },\n});\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n  },\n  paper: {\n    padding: theme.spacing(3),\n    // textAlign: 'center',\n    marginTop: theme.spacing(1),\n\n  },\n  rawpaper: {\n    padding: theme.spacing(3),\n    // textAlign: 'center',\n    marginTop: theme.spacing(1),\n    boxShadow: 'none'\n  },\n  heading: {\n    fontSize: theme.typography.pxToRem(15),\n    flexBasis: '33.33%',\n    flexShrink: 0,\n  },\n  button: {\n    margin: theme.spacing(1),\n  },\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 160,\n  },\n  littlePanel: {\n    width: 200,\n    height: 200\n  },\n  detailPanel: {\n    flexDirection: 'column'\n  },\n  Right:{\n    maxHeight: '100vh',\n    overflowY: 'scroll'\n  },\n}));\n\nconst PrettoSlider = withStyles(theme => ({\n  root: {\n    color: theme.primary,\n    height: 8,\n  },\n  thumb: {\n    height: 24,\n    width: 24,\n    backgroundColor: '#fff',\n    border: '2px solid currentColor',\n    marginTop: -8,\n    marginLeft: -12,\n    '&:focus,&:hover,&$active': {\n      boxShadow: 'inherit',\n    },\n  },\n  active: {},\n  valueLabel: {\n    left: 'calc(-50% + 4px)',\n  },\n  track: {\n    height: 8,\n    borderRadius: 4,\n  },\n  rail: {\n    height: 8,\n    borderRadius: 4,\n  },\n}))(Slider);\n\nfunction FixedMaxWidth (props){\n  const thediv = useRef(null)\n  const wrap = useRef(null)\n  useEffect(()=>{\n    console.log('set',wrap.current.style.width )\n    thediv.current.style.width = wrap.current.style.width\n  })\n  return(\n    <div ref={wrap} className='canvas-frame-wrapper'>\n      <div ref={thediv} id=\"canvas-frame\" className=\"canvas-frame\"></div>\n      {props.children}\n    </div>\n  )\n}\n\n\nfunction App() {\n  const [spacing, setSpacing] = React.useState(2);\n  const [tau, setTau] = React.useState(0.5)\n  const [gran, setGran] = React.useState(20)\n  const [img, setImg] = React.useState(false)\n  const [imgSpeed, setImgSpeed] = React.useState(1.0)\n  const [disableRest, setDisableRest] = React.useState(false)\n  const [cleanup, setCleanup] = React.useState(false)\n  const [param, setParam] = React.useState(false)\n  const [imgArr, setImgArr] = React.useState([])\n  const [whichImg, setWhichImg] = React.useState(0)\n  const [whichSampler, setWhichSampler] = React.useState('linear')\n\n  const classes = useStyles();\n\n  function onChangeTau(e, val) {\n      setTau(val)\n  }\n  function onChangeGran(e, val) {\n      setGran(val)\n  }\n  function onChangeImg() {\n    setImg(!img)\n  }\n\n  function onChangeImgSpeed(e, val) {\n    setImgSpeed(val)\n  }\n\n  function onDisableAll() {\n    setDisableRest(!disableRest)\n  }\n\n  function resetScene() {\n    setImg(false)\n    setDisableRest(false)\n    setCleanup(true)\n  }\n  function resetDone() {\n    setCleanup(false)\n  }\n  function handleSelectImg(event) {\n    setWhichImg(event.target.value)\n  }\n  function handleSelectSampler(event) {\n    setWhichSampler(event.target.value)\n  }\n  function setImgsArr(i) {\n    setImgArr(i)\n  }\n\n  return (\n    <ThemeProvider theme={theTheme}>\n      <CssBaseline>\n        <div className=\"App\">\n          <Grid container direction=\"row\" className={classes.root} spacing={0}>\n            <Grid item xs={8}>\n              <FixedMaxWidth>\n                <Render \n                  tau={tau} gran={gran} \n                  theimg={img} imgSpeed={imgSpeed} \n                  colorGroup={blue} bifrost={disableRest} \n                  cleanup={cleanup} oncleanupDone={resetDone} \n                  elId={\"canvas-frame\"}\n                  enable_param={param}\n                  getImg={setImgsArr}\n                  selectImg={whichImg}\n                  selectSampler={whichSampler}\n                  ></Render>\n              </FixedMaxWidth>\n            </Grid>\n            <Grid item xs={4} className={classes.Right}>\n              <div className='ctrl'>\n              \n              <ExpansionPanel>\n                <ExpansionPanelSummary\n                  expandIcon={<ExpandMoreIcon />}\n                >\n                  <Typography className={classes.heading}>使用方法</Typography>\n                </ExpansionPanelSummary>\n                <ExpansionPanelDetails>\n                  <Typography>\n                    左侧任意点击创建点\n                     ，选中点拖拽重定位\n                    </Typography>\n                  \n                </ExpansionPanelDetails>\n                <ExpansionPanelDetails>\n                  <div id=\"control-canvase\"></div>\n                </ExpansionPanelDetails>\n              </ExpansionPanel>\n\n              <ExpansionPanel>\n                <ExpansionPanelSummary\n                  expandIcon={<ExpandMoreIcon />}\n                >\n                  <Typography >Spline Basic Control</Typography>\n                </ExpansionPanelSummary>\n                <ExpansionPanelDetails className={classes.detailPanel}>\n                  <Paper className={classes.paper}>\n                    <Typography id=\"tau\">\n                      Choose Tau Value\n                    </Typography>\n                    <div className='slide'>\n                      <PrettoSlider  onChangeCommitted={onChangeTau} max={1} min={0} step={0.01} valueLabelDisplay=\"auto\" aria-label=\"tau\" defaultValue={0.5} />\n                    </div>\n                  </Paper> \n                  <Paper className={classes.paper}>\n                    <Typography id=\"gran\">\n                    Granularity\n                    </Typography>\n                    <div className='slide'>\n                      <PrettoSlider disabled={disableRest} onChangeCommitted={onChangeGran} max={50} min={2} step={1} valueLabelDisplay=\"auto\" aria-label=\"gran\" defaultValue={20} />\n                    </div>\n                  </Paper>\n                </ExpansionPanelDetails>\n                </ExpansionPanel>\n\n                <ExpansionPanel>\n                <ExpansionPanelSummary\n                  expandIcon={<ExpandMoreIcon />}\n                >\n                  <Typography >Image Player</Typography>\n                </ExpansionPanelSummary>\n                <ExpansionPanelDetails className={classes.detailPanel}>\n                <Paper className={classes.rawpaper}>\n                  \n                  <FormControlLabel\n                    control={\n                      <Switch\n                        checked={img}\n                        onChange={onChangeImg}\n                        value=\"checkedA\"\n                        color=\"primary\"\n                        inputProps={{ 'aria-label': 'secondary checkbox' }}\n                        disabled={disableRest}\n                      />\n                    }\n                    label=\"Run Shinnosuke\"\n                  />\n                  <Paper className={classes.rawpaper}>\n                  <FormControl variant=\"filled\" className={classes.formControl}>\n                    <InputLabel htmlFor=\"select-img\">Select Image</InputLabel>\n                    <Select\n                      value={whichImg}\n                      onChange={handleSelectImg}\n                      inputProps={{\n                        name: 'img',\n                        id: 'select-img',\n                      }}\n                    >\n                      {\n                        \n                        imgArr.map((val, key)=> <MenuItem key={key} value={key}>{val.name}</MenuItem>)\n                      }\n                    </Select>\n                  </FormControl>\n                  </Paper>\n                  <Paper className={classes.rawpaper}>\n                  <Typography id=\"gran\">\n                    Animation Speed \n                  </Typography>\n                  <div className='slide'>\n                    <PrettoSlider disabled={disableRest} onChangeCommitted={onChangeImgSpeed} max={2.1} min={0.1} step={0.1} valueLabelDisplay=\"auto\" aria-label=\"speed\" defaultValue={1} />\n                  </div>\n                  </Paper>\n                </Paper>\n                </ExpansionPanelDetails>\n                </ExpansionPanel>\n                <Paper className={classes.paper}>\n                  <FormControlLabel\n                    control={\n                      <Switch\n                        checked={disableRest}\n                        onChange={onDisableAll}\n                        value=\"checkedA\"\n                        color=\"primary\"\n                        inputProps={{ 'aria-label': 'secondary checkbox' }}\n                      />\n                    }\n                    label=\"Bifrost\"\n                  />\n                  <FormControlLabel\n                    control={\n                      <Switch\n                        checked={param}\n                        onChange={()=> setParam(!param)}\n                        value=\"checkedA\"\n                        color=\"primary\"\n                        inputProps={{ 'aria-label': 'secondary checkbox' }}\n                        disabled={disableRest}\n                      />\n                    }\n                    label=\"Parametize\"\n                  />\n                  <Paper className={classes.rawpaper}>\n                  <FormControl variant=\"filled\" className={classes.formControl}>\n                    <InputLabel htmlFor=\"select-ease\">Ease Function</InputLabel>\n                    <Select\n                      value={whichSampler}\n                      onChange={handleSelectSampler}\n                      inputProps={{\n                        name: 'ease',\n                        id: 'select-ease',\n                      }}\n                    >\n                      {\n                        Object.keys(Samplers).map((val, key)=> <MenuItem key={key} value={val}>{val}</MenuItem>)\n                      }\n                    </Select>\n                  </FormControl>\n                  </Paper>\n                </Paper>\n                <Fab  aria-label=\"delete\" color=\"secondary\" className={classes.button} onClick={resetScene}>\n                  <DeleteIcon />\n                </Fab >\n                \n              </div>\n            </Grid>\n\n          </Grid>\n        </div>\n    </CssBaseline >\n    </ThemeProvider>\n  );\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}